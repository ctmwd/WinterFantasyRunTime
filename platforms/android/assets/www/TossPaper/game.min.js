var MLE = MLE || {};
MLE.init = function (a) {
    MLE.forceFPS = a.forceFPS || false;
    MLE.showDebug = a.showDebug || false;
    MLE.noCache = true;
    MLE.mouseScale = 1;
    MLE.mouse = new MouseInput;
    MLE.keyboard = new KeyboardInput;
    MLE.wrapper = document.getElementById(a.wrapper || "wrapper");
    MLE.canvas = document.getElementById(a.canvas || "gameCanvas");
    if (!MLE.canvas) MLE.canvas = document.createElement("canvas"), MLE.canvas.id = "gameCanvas", MLE.wrapper.appendChild(MLE.canvas);
    MLE.width = a.width || 320;
    MLE.height = a.height || 480;
    MLE.canvas.width = MLE.width;
    MLE.canvas.height =
        MLE.height;
    MLE.wrapper.style.width = MLE.width + "px";
    MLE.wrapper.style.height = MLE.height + "px";
    MLE.context = MLE.canvas.getContext("2d");
    MLE.scaling = a.scaling || true;
    MLE.scaling && MLE.initScaling();
    MLE.manifest = a.manifest || [];
    MLE.assets = new MLE.Assets;
    MLE.preManifest = a.preManifest || [];
    MLE.preLoader = new MLE.Loader(MLE.preManifest, MLE.startLoader.bind(MLE));
    MLE.preLoaderScene = a.preLoaderScene;
    MLE.tick = 0;
    MLE.lastFrameTime = Date.now();
    MLE.gameType = a.game;
    MLE.game = null;
    MLE.cameraX = 0;
    MLE.cameraY = 0;
    MLE.lastCamX =
        0;
    MLE.lastCamY = 0;
    MLE.context.imageSmoothingEnabled = true
};
MLE.startLoader = function () {
    MLE.tick = 0;
    MLE.lastFrameTime = Date.now();
    MLE.game = new MLE.preLoaderScene;
    MLE.rotateScene = new RotateScene;
    MLE.mouse.init();
    MLE.keyboard.init();
    MLE.loader = new MLE.Loader(MLE.manifest, function () {});
    MLE.gameLoop()
};
MLE.start = function () {
    setTimeout(function () {
        createjs.Tween._tweens = [];
        MLE.context.imageSmoothingEnabled = false;
        MLE.nextGame = new MLE.gameType
    }, 200)
};
MLE.initScaling = function () {
    MLE.sizeHandler();
    window.addEventListener("resize", function () {
        MLE.sizeHandler(15)
    }, false);
    window.addEventListener("orientationchange", function () {
        MLE.sizeHandler(15)
    }, false)
};
var cumulTick = 0,
    cumulCounter = 0,
    fps = 0;
MLE.gameLoop = function () {
    MLE.sizeHandler();
    if (window.innerHeight < window.innerWidth && isMobile.any()) MLE.sizeHandler(), MLE.rotateScene.update(), MLE.rotateScene.draw();
    else {
        document.body.style["background-color"] = "#000000";
        if (MLE.nextGame) MLE.game = MLE.nextGame, MLE.nextGame = null;
        MLE.context.globalAlpha = 1;
        MLE.tick = Date.now() - MLE.lastFrameTime;
        MLE.context.clearRect(0, 0, MLE.width, MLE.height);
        MLE.lastFrameTime += MLE.tick;
        if (MLE.tick > 50) MLE.tick = 50;
        Date.now();
        createjs.Tween.tick(MLE.tick, false);
        MLE.keyboard.update();
        MLE.mouse.update();
        MLE.game.update();
        Date.now();
        Date.now();
        MLE.game.draw();
        Date.now();
        cumulTick += MLE.tick;
        cumulCounter += 1;
        cumulTick > 1E3 && (cumulTick -= 1E3, fps = cumulCounter, cumulCounter = 0);
        if (MLE.showDebug) MLE.context.font = "18px sans-serif", MLE.context.textAlign = "left", MLE.context.fillStyle = "#ff00ff", MLE.context.fillText(fps, 0, 20);
        MLE.lastCamX = MLE.cameraX;
        MLE.lastCamY = MLE.cameraY
    }
    MLE.idAnimationFrame = requestAnimationFrame(MLE.gameLoop)
};
MLE.downCallbacks = function () {
    MLE.game && MLE.game.downCallbacks && MLE.game.downCallbacks()
};
MLE.upCallbacks = function () {
    MLE.game && MLE.game.upCallbacks && MLE.game.upCallbacks()
};
MLE.sizeHandler = function (a) {
    window.scrollTo(0, 1);
    var b = MLE.width,
        c = MLE.height,
        e = window.innerWidth,
        d = window.innerHeight,
        e = limitNumber(e, 160, 1200),
        d = limitNumber(d, 160, 1200);
    multiplier = Math.min(d / c, e / b);
    b *= multiplier;
    c *= multiplier;
    e = MLE.wrapper;
    e.style.display = "block";
    e.style.width = b + "px";
    e.style.height = c + 0 + "px";
    e.style.left = window.innerWidth / 2 - b / 2 + "px";
    e.style.top = window.innerHeight / 2 - c / 2 + "px";
    a && setTimeout(function () {
        MLE.sizeHandler(a - 1)
    }, 500)
};
(function () {
    for (var a = 0, b = ["ms", "moz", "webkit", "o"], c = 0; c < b.length && !window.requestAnimationFrame; ++c) window.requestAnimationFrame = window[b[c] + "RequestAnimationFrame"], window.cancelAnimationFrame = window[b[c] + "CancelAnimationFrame"] || window[b[c] + "CancelRequestAnimationFrame"];
    if (!window.requestAnimationFrame) window.requestAnimationFrame = function (b) {
        var c = (new Date).getTime(),
            f = Math.max(0, 16 - (c - a)),
            g = window.setTimeout(function () {
                b(c + f)
            }, f);
        a = c + f;
        return g
    };
    if (!window.cancelAnimationFrame) window.cancelAnimationFrame =
        function (a) {
            clearTimeout(a)
        }
})();
MLE = MLE || {};
MLE.Assets = function () {
    this.textures = {};
    this.bitmaps = {}
};
MLE.Assets.prototype.addResource = function (a) {
    a.isSpriteSheet ? this.addSpriteSheet(a) : (this.addTexture(a.id, a.img), this.addBitmap(a.id, a.img))
};
MLE.Assets.prototype.addBitmap = function (a, b, c) {
    this.bitmaps[a] = new MLE.Bitmap(b, c)
};
MLE.Assets.prototype.addTexture = function (a, b) {
    this.textures[a] = b
};
MLE.Assets.prototype.addSpriteSheet = function (a) {
    this.addTexture(a.id, a.img);
    for (var b in a.descObj) this.addBitmap(b, a.img, a.descObj[b].frame)
};
MLE.Assets.prototype.getBitmap = function (a) {
    try {
        return this.bitmaps[a] === null ? null : this.bitmaps[a].clone()
    } catch (b) {
        console.log("Nie mo\u017ce sklonowa\u0107: ", a)
    }
};
MLE = MLE || {};
MLE.Util = {};
MLE.Util.toDeg = function (a) {
    return a * 180 / Math.PI
};
MLE.Util.toRad = function (a) {
    return a / 180 * Math.PI
};
MLE.Util.mapValue = function (a, b, c, e, d) {
    return e + (d - e) * ((a - b) / (c - b))
};
MLE.Util.testMapValue = function () {
    console.log("1, 2, 3, 4, 5");
    console.log(MLE.Util.mapValue(1, 2, 3, 4, 5));
    console.log("Powinno: 3");
    console.log("2, 2, 3, 4, 5");
    console.log(MLE.Util.mapValue(2, 2, 3, 4, 5));
    console.log("Powinno: 4");
    console.log("0.25, 0, 1, 100, 1100");
    console.log(MLE.Util.mapValue(0.25, 0, 1, 100, 1100));
    console.log("Powinno: 350");
    console.log("0.25, 0, 1, 1000, 0");
    console.log(MLE.Util.mapValue(0.25, 0, 1, 1E3, 0));
    console.log("Powinno: 750");
    console.log("0.25, 0, 1, 1000, 0");
    console.log(MLE.Util.mapValue(0.25,
        1, 0, 0, 1E3));
    console.log("Powinno: 750");
    console.log("1250, 2000, 1000, 1.5, 0");
    console.log(MLE.Util.mapValue(1250, 2E3, 1E3, 1.5, 0));
    console.log("Powinno: 0.375");
    console.log("1250, 2000, 1000, 1.5, 3");
    console.log(MLE.Util.mapValue(1250, 2E3, 1E3, 1.4, 3));
    console.log("Powinno: 2.6")
};
MLE.Util.sortArray = function (a, b) {
    a.sort(function (a, e) {
        return e[b] - a[b]
    });
    return a
};
MLE.Util.ajaxRequest = function () {
    var a = ["Msxml2.XMLHTTP", "Microsoft.XMLHTTP"];
    if (window.ActiveXObject)
        for (var b = 0; b < a.length; b++) try {
            return new ActiveXObject(a[b])
        } catch (c) {} else return window.XMLHttpRequest ? new XMLHttpRequest : false
};
MLE.Util.isCanvasEmpty = function (a) {
    for (var a = a.getContext("2d").getImageData(0, 0, a.width, a.height).data, b = 0, c = a.length; b < c; b += 4)
        if (a[b + 3]) return false;
    return true
};
trace = function () {};
Function.prototype.bind = function (a) {
    var b = this;
    return temp = function () {
        return b.apply(a, arguments)
    }
};
limitNumber = function (a, b, c) {
    return Math.min(c, Math.max(b, a))
};

function shuffleArray(a) {
    for (var b = a.length - 1; b > 0; b--) {
        var c = Math.floor(Math.random() * (b + 1)),
            e = a[b];
        a[b] = a[c];
        a[c] = e
    }
    return a
}
var isMobile = {
    Android: function () {
        return navigator.userAgent.match(/Android/i)
    },
    BlackBerry: function () {
        return navigator.userAgent.match(/BlackBerry/i)
    },
    iOS: function () {
        return navigator.userAgent.match(/iPhone|iPad|iPod/i)
    },
    Opera: function () {
        return navigator.userAgent.match(/Opera Mini/i)
    },
    Windows: function () {
        return navigator.userAgent.match(/IEMobile/i)
    },
    any: function () {
        return isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows()
    }
};

function getDistance(a, b, c, e) {
    a = Math.abs(a - c);
    b = Math.abs(b - e);
    return Math.sqrt(a * a + b * b)
}
MLE.Util.createArrayFromTo = function (a, b) {
    for (var c = Math.abs(a - b) / (a - b), e = [], d = true, f = a; d; f -= c) e.push(f), f === b && (d = false);
    return e
};
Number.prototype.map = function (a, b, c, e) {
    return c + (e - c) * ((this - a) / (b - a))
};
Number.prototype.isBetween = function (a, b) {
    var c;
    return this <= a && this >= b || this >= a && this <= b
};
MLE.Util.colorBetweenColors = function (a, b, c) {
    for (var e = [0, 0, 0, 0], d = 0; d < 4; d++) e[d] = a[d] > b[d] ? a[d] - (a[d] - b[d]) * c : (b[d] - a[d]) * c + a[d];
    for (d = 0; d < 4; d++) e[d] = Math.floor(e[d]);
    return e
};
Number.prototype.map = function (a, b, c, e) {
    return c + (e - c) * ((this - a) / (b - a))
};
MLE = MLE || {};
MLE.Loader = function (a, b) {
    this.allResources = a.length;
    this.loadedResources = 0;
    this.onCompleteCallback = b;
    this.ready = false;
    this.manifest = a;
    if (MLE.noCache)
        for (var c = 0; c < this.manifest.length; c++) this.manifest[c].isFaceFont || (this.manifest[c].src += "?" + Date.now() + Math.random() * 999999);
    var e = new PxLoader;
    this.loader = e;
    for (c = 0; c < a.length; c++)
        if (a[c].isJSON) this.loadJSON(a[c]);
        else if (a[c].isFaceFont) {
        var d = new MLE.FaceFont;
        d.onLoad = this.faceFontLoaded.bind(this);
        d.loadFont(a[c].src)
    } else d = new PxLoaderImage(a[c].src), d.id =
        a[c].id || null, d.isSpriteSheet = a[c].isSpriteSheet || false, d.descObj = a[c].descObj || null, e.add(d);
    e.addProgressListener(this.onProgress.bind(this));
    e.addCompletionListener(this.onComplete.bind(this));
    e.start()
};
MLE.Loader.prototype.onProgress = function (a) {
    this.loadedResources += 1;
    MLE.assets.addResource(a.resource);
    this.drawProgress(a)
};
MLE.Loader.prototype.onComplete = function () {
    this.onLoadAsset()
};
MLE.Loader.prototype.drawProgress = function () {};
MLE.Loader.prototype.loadJSON = function (a) {
    var b = new MLE.Util.ajaxRequest;
    b.onreadystatechange = this.onLoadJSON.bind(this);
    b.open("GET", a.src, true);
    b.send(null)
};
MLE.Loader.prototype.onLoadJSON = function (a) {
    a.target.readyState === 4 && (a.target.status === 200 ? (this.loadedResources += 1, this.drawProgress(), JSON.parse(a.target.responseText), this.onLoadAsset()) : alert("Error with loading json, try to reload!"))
};
MLE.Loader.prototype.faceFontLoaded = function () {
    this.loadedResources += 1;
    this.drawProgress();
    this.onLoadAsset()
};
MLE.Loader.prototype.onLoadAsset = function () {
    if (this.loadedResources === this.allResources && (this.ready = true, this.onCompleteCallback)) this.onCompleteCallback()
};
MLE = MLE || {};
MLE.Bitmap = function (a, b) {
    this.texture = a;
    this.rect = b ? b : {
        x: 0,
        y: 0,
        w: a.naturalWidth,
        h: a.naturalHeight
    }
};
MLE.Bitmap.prototype.draw = function (a, b) {
    MLE.context.drawImage(this.texture, this.rect.x, this.rect.y, this.rect.w, this.rect.h, a, b, this.rect.w, this.rect.h)
};
MLE.Bitmap.prototype.clone = function () {
    return new MLE.Bitmap(this.texture, this.rect)
};
MLE = MLE || {};
MLE.FrameAnim = function (a, b, c) {
    this.sprite = a;
    this.frameW = this.sprite.rect.w / b;
    this.frameH = this.sprite.rect.h / c;
    this.sprite.pivotX *= this.frameW / this.sprite.rect.w;
    this.sprite.pivotY *= this.frameH / this.sprite.rect.h;
    this.anims = {};
    this.currentAnim = null;
    this.stopped = false;
    this.cumulTime = 0
};
MLE.FrameAnim.prototype.addAnim = function (a, b, c) {
    this.anims[a] = {
        fps: c,
        frames: b,
        currentFrame: 0
    };
    this.currentFrame = this.anims[a]
};
MLE.FrameAnim.prototype.gotoAndPlay = function (a, b) {
    var c;
    if (b) this.currentAnim = this.anims[b];
    this.stopped = false;
    this.currentAnim.currentFrame = a || 0;
    this.cumulTime = 0;
    this.updateSpriteRect()
};
MLE.FrameAnim.prototype.gotoAndStop = function (a, b) {
    var c;
    if (b) this.currentAnim = this.anims[b];
    this.stopped = true;
    this.currentAnim.currentFrame = a || 0;
    this.cumulTime = 0;
    this.updateSpriteRect()
};
MLE.FrameAnim.prototype.update = function () {
    if (!(this.stopped || this.currentAnim === null))
        if (this.cumulTime += MLE.tick, this.cumulTime > 1E3 / this.currentAnim.fps) {
            this.cumulTime -= 1E3 / this.currentAnim.fps;
            if (this.currentAnim.currentFrame === this.currentAnim.frames.length - 1 && (this.onLoop(this.currentAnim), this.stopOnLoop)) {
                this.stopped = true;
                this.updateSpriteRect();
                return
            }
            this.currentAnim.currentFrame = (this.currentAnim.currentFrame + 1) % this.currentAnim.frames.length;
            this.onFrameChange(this.currentAnim, this.currentAnim.currentFrame);
            this.updateSpriteRect()
        }
};
MLE.FrameAnim.prototype.updateSpriteRect = function () {
    var a = this.currentAnim.frames[this.currentAnim.currentFrame],
        b = Math.floor(a / Math.floor(this.sprite.bitmap.rect.w / this.frameW));
    this.sprite.rect.x = a % Math.floor(this.sprite.bitmap.rect.w / this.frameW) * this.frameW;
    this.sprite.rect.y = b * this.frameH;
    this.sprite.rect.w = this.frameW;
    this.sprite.rect.h = this.frameH
};
MLE.FrameAnim.prototype.onFrameChange = function () {};
MLE.FrameAnim.prototype.onLoop = function () {};
MLE.FrameAnim.prototype.isPlaying = function (a) {
    return this.currentAnim === this.anims[a] && this.anims[a] ? true : false
};
MLE = MLE || {};
MLE.Sprite = function (a, b, c, e) {
    typeof a === "string" && (a = MLE.assets.getBitmap(a));
    this.bitmap = a;
    this.rect = e ? e : {
        x: 0,
        y: 0,
        w: a.rect.w,
        h: a.rect.h
    };
    this.x = b;
    this.y = c;
    this.scaleY = this.scaleX = 1;
    this.pivotY = this.pivotX = this.angle = this.skewY = this.skewX = 0;
    this.alpha = 1;
    this.useTransforms = true;
    this.anchor = false
};
MLE.Sprite.prototype.draw = function () {
    if (this.alpha > 1) this.alpha = 1;
    else if (this.alpha < 0) this.alpha = 0;
    if (this.alpha !== 0) {
        var a = MLE.cameraX,
            b = MLE.cameraY;
        if (this.anchor) MLE.cameraX = 0, MLE.cameraY = 0;
        if (this.useTransforms || !(this.x + this.pivotX + this.rect.w * this.scaleX < MLE.cameraX || this.x + this.pivotX > MLE.cameraX + MLE.width || this.y + this.pivotY + this.rect.h * this.scaleX < MLE.cameraY || this.y + this.pivotY > MLE.cameraY + MLE.height)) {
            var c = MLE.context.globalAlpha;
            MLE.context.globalAlpha *= this.alpha;
            if (this.useTransforms) {
                var e =
                    MLE.context;
                e.save();
                e.translate(Math.floor(this.x - MLE.cameraX), Math.floor(this.y - MLE.cameraY));
                e.rotate(MLE.Util.toRad(this.angle));
                e.transform(this.scaleX, Math.tan(MLE.Util.toRad(this.skewY)), Math.tan(MLE.Util.toRad(this.skewX)), this.scaleY, 0, 0);
                MLE.context.drawImage(this.bitmap.texture, this.rect.x + this.bitmap.rect.x, this.rect.y + this.bitmap.rect.y, this.rect.w, this.rect.h, -this.pivotX, -this.pivotY, this.rect.w, this.rect.h);
                e.restore()
            } else MLE.context.drawImage(this.bitmap.texture, this.rect.x + this.bitmap.rect.x,
                this.rect.y + this.bitmap.rect.y, this.rect.w, this.rect.h, Math.floor(this.x - MLE.cameraX), Math.floor(this.y - MLE.cameraY), this.rect.w, this.rect.h);
            MLE.context.globalAlpha = c
        }
        MLE.cameraX = a;
        MLE.cameraY = b
    }
};
MLE.Sprite.prototype.centerPivot = function () {
    this.pivotX = this.rect.w / 2;
    this.pivotY = this.rect.h / 2
};
MLE.Sprite.prototype.setPivotPercent = function (a, b) {
    this.pivotX = a * this.rect.w;
    this.pivotY = b * this.rect.h
};
MLE.Sprite.prototype.changeBitmap = function (a, b) {
    typeof a === "string" && (a = MLE.assets.getBitmap(a));
    this.bitmap = a;
    this.rect = b ? b : {
        x: 0,
        y: 0,
        w: a.rect.w,
        h: a.rect.h
    }
};
MLE = MLE || {};
MLE.TextSprite = function (a, b, c, e, d) {
    this.x = b;
    this.y = c;
    this.alpha = 1;
    this.text = a || "";
    this.font = e || "Comic Sans MS";
    this.size = 32;
    this.align = d || "center";
    this.color = "#ffffff";
    this.border = "#000000";
    this.storkeThin = 5;
    this.baseline = "middle";
    this.lineHeight = 50;
    this.wrap = 9999
};
MLE.TextSprite.prototype.draw = function () {
    var a = MLE.context;
    a.save();
    a.globalAlpha *= this.alpha;
    a.font = this.size + "px " + this.font;
    a.textAlign = this.align;
    a.fillStyle = this.color;
    a.strokeStyle = this.border;
    a.textBaseline = this.baseline;
    a.lineWidth = 5;
    a.strokeText(this.text, this.x, this.y);
    a.fillText(this.text, this.x, this.y);
    a.restore()
};
MLE.TextSprite.prototype.getWidth = function () {
    var a = MLE.context;
    a.save();
    a.globalAlpha *= this.alpha;
    a.font = this.size + "px " + this.font;
    a.textAlign = this.align;
    a.fillStyle = this.color;
    a.strokeStyle = this.border;
    a.textBaseline = this.baseline;
    a.lineWidth = 5;
    var b = a.measureText(this.text);
    a.restore();
    return b.width
};
MLE.TextSprite.prototype.adjustFontSize = function (a) {
    for (var b = true; b === true && this.size > 5;) this.getWidth() < a ? b = false : this.size -= 1
};

function wrapText(a, b, c, e, d, f) {
    b = b.split("\n");
    for (d = 0; d < b.length; d++) a.fillText(b[d], c, e, 40), a.lineWidth = 5, a.strokeText(b[d], c, e), e += f
};
MLE = MLE || {};
MLE.Group = function () {
    this.y = this.x = 0;
    this.rect = {
        x: 0,
        y: 0,
        w: 0,
        h: 0
    };
    this.scaleY = this.scaleX = 1;
    this.pivotY = this.pivotX = this.angle = this.skewY = this.skewX = 0;
    this.alpha = 1;
    this.children = []
};
MLE.Group.prototype.draw = function () {
    if (this.alpha > 1) this.alpha = 1;
    else if (this.alpha < 0) this.alpha = 0;
    if (this.alpha !== 0) {
        var a = MLE.cameraX,
            b = MLE.cameraY;
        MLE.cameraX = 0;
        MLE.cameraY = 0;
        var c = MLE.context;
        c.save();
        c.globalAlpha *= this.alpha;
        c.translate(this.x - MLE.cameraX, this.y - MLE.cameraY);
        c.rotate(MLE.Util.toRad(this.angle));
        c.transform(this.scaleX, Math.tan(MLE.Util.toRad(this.skewY)), Math.tan(MLE.Util.toRad(this.skewX)), this.scaleY, 0, 0);
        c.translate(-this.pivotX, -this.pivotY);
        this.preDraw();
        for (var e = 0; e <
            this.children.length; e++) this.children[e].draw();
        this.postDraw();
        c.restore();
        MLE.cameraX = a;
        MLE.cameraY = b;
        c.globalAlpha /= this.alpha
    }
};
MLE.Group.prototype.centerPivot = function () {
    this.pivotX = this.rect.w / 2;
    this.pivotY = this.rect.h / 2
};
MLE.Group.prototype.addChild = function (a) {
    a.grouped = this;
    this.children.push(a)
};
MLE.Group.prototype.addChildInBack = function (a) {
    this.children.unshift(a)
};
MLE.Group.prototype.preDraw = function () {};
MLE.Group.prototype.postDraw = function () {};
MLE.Group.prototype.removeAllTweens = function () {
    createjs.Tween.removeTweens(this);
    for (var a = 0; a < this.children.length; a++) createjs.Tween.removeTweens(this.children[a])
};
MLE = MLE || {};
MLE.SimpleMovement = function (a) {
    this.sprite = a;
    this.init()
};
MLE.SimpleMovement.prototype.init = function () {
    this.accelY = this.accelX = this.velY = this.velX = 0;
    this.maxVelY = this.maxVelX = 1E3;
    this.gravity = 0
};
MLE.SimpleMovement.prototype.update = function () {
    var a = this.accelX,
        a = a * MLE.tick / 1E3;
    this.sprite.x += MLE.tick / 1E3 * (this.velX + a / 2);
    this.velX += a;
    a = this.gravity + this.accelY;
    a = a * MLE.tick / 1E3;
    this.sprite.y += MLE.tick / 1E3 * (this.velY + a / 2);
    this.velY += a;
    if (this.velX > this.maxVelX) this.velX = this.maxVelX;
    else if (this.velX < -this.maxVelX) this.velX = -this.maxVelX;
    if (this.velY > this.maxVelY) this.velY = this.maxVelY;
    else if (this.velY < -this.maxVelY) this.velY = -this.maxVelY
};
MLE.SimpleMovement.prototype.setValues = function (a, b, c, e, d, f, g) {
    this.velX = a;
    this.velY = b;
    this.accelX = c;
    this.accelY = e;
    this.maxVelX = d || this.maxVelX;
    this.maxVelY = f || this.maxVelY;
    this.gravity = g || this.gravity
};
MLE.CircleCollision = function (a, b, c, e, d) {
    this.sprite = a;
    this.x = b;
    this.y = c;
    this.r = e;
    this.fillStyle = d || "rgba(0,255,255,0.6)"
};
MLE.CircleCollision.prototype = {
    checkAgainst: function (a) {
        var b = Math.abs(this.sprite.x + this.x - a.x - a.sprite.x),
            c = Math.abs(this.sprite.y + this.y - a.y - a.sprite.y);
        return b * b + c * c < (this.r + a.r) * (this.r + a.r)
    },
    drawDebug: function () {}
};
MLE.CircleCollision.prototype.checkAgainstWithPosCorrection = function (a, b, c) {
    var e = this.checkAgainstWithShift(a, b, c);
    if (e === null) return null;
    getDistance(b, c, e.ox1, e.oy1) < getDistance(b, c, e.ox2, e.oy2) || e.ox2 === null ? (a.sprite.x = e.ox1 - (this.x + this.sprite.x > e.ox1 ? 1 : -1), a.sprite.y = e.oy1 - (this.y + this.sprite.y > e.oy1 ? 1 : -1)) : (a.sprite.x = e.ox2 - (this.x + this.sprite.x > e.ox2 ? 1 : -1), a.sprite.y = e.oy2 - (this.y + this.sprite.y > e.oy2 ? 1 : -1));
    return true
};
MLE.CircleCollision.prototype.checkAgainstWithShift = function (a, b, c) {
    var e = (a.y + a.sprite.y - c) / (a.x + a.sprite.x - b),
        d = e * (this.x + this.sprite.x) + (c - b * e) - this.y - this.sprite.y,
        f = this.r + a.r,
        g = e * e + 1,
        h = 2 * e * d,
        i = h * h - 4 * g * (d * d - f * f),
        f = (-h - Math.sqrt(i)) / (2 * g),
        g = (-h + Math.sqrt(i)) / (2 * g),
        h = e * f + d,
        e = e * g + d;
    f += this.x + this.sprite.x;
    g += this.x + this.sprite.x;
    h += this.y + this.sprite.y;
    e += this.y + this.sprite.y;
    if (!f.isBetween(b, a.x + a.sprite.x) || !h.isBetween(c, a.y + a.sprite.y)) h = f = null;
    if (!g.isBetween(b, a.x + a.sprite.x) || !e.isBetween(c,
        a.y + a.sprite.y)) e = g = null;
    return (f === null || isNaN(f)) && (g === null || isNaN(g)) && (h === null || isNaN(h)) && (e === null || isNaN(e)) ? null : {
        ox1: f,
        oy1: h,
        ox2: g,
        oy2: e
    }
};
MLE = MLE || {};
MLE.TouchEventTarget = function (a) {
    this.sprite = a;
    this.isInside = false;
    this.collisionBox = {
        x: 0,
        y: 0,
        w: a.rect.w,
        h: a.rect.h
    }
};
MLE.TouchEventTarget.prototype.init = function () {};
MLE.TouchEventTarget.prototype.update = function () {
    var a = MLE.mouse.pressed,
        b = MLE.mouse.released,
        c = MLE.mouse.isDown,
        e = MLE.mouse.x,
        d = MLE.mouse.y,
        f = this.getCumulX(),
        g = this.getCumulY(),
        h = this.collisionBox.w,
        i = this.collisionBox.h,
        e = e > f && e < f + h && d > g && d < g + i ? true : false;
    if (c && e && !this.isInside) this.isInside = true, this.onIn();
    if (a && e) this.onDown();
    if (c && !e && this.isInside) this.isInside = false, this.onOut();
    if (b && e) this.onUp()
};
MLE.TouchEventTarget.prototype.drawDebug = function () {
    MLE.context.fillStyle = "#ffff00";
    MLE.context.globalAlpha = 0.5;
    MLE.context.fillRect(this.sprite.x - this.sprite.pivotX + this.collisionBox.x - MLE.cameraX, this.sprite.y - this.sprite.pivotY + this.collisionBox.y - MLE.cameraY, this.collisionBox.w, this.collisionBox.h);
    MLE.context.globalAlpha = 1
};
MLE.TouchEventTarget.prototype.setArea = function (a, b, c, e) {
    this.collisionBox.x = a;
    this.collisionBox.y = b;
    this.collisionBox.w = c;
    this.collisionBox.h = e
};
MLE.TouchEventTarget.prototype.onDown = function () {
    console.log("onDown")
};
MLE.TouchEventTarget.prototype.onUp = function () {
    console.log("onUp")
};
MLE.TouchEventTarget.prototype.onOut = function () {
    console.log("onOut")
};
MLE.TouchEventTarget.prototype.onIn = function () {};
MLE.TouchEventTarget.prototype.getCumulX = function () {
    for (var a = this.sprite.x - this.sprite.pivotX + this.collisionBox.x - MLE.cameraX, b = this.sprite; b.grouped;) b = b.grouped, a += b.x - b.pivotX;
    return a
};
MLE.TouchEventTarget.prototype.getCumulY = function () {
    for (var a = this.sprite.y - this.sprite.pivotY + this.collisionBox.y - MLE.cameraY, b = this.sprite; b.grouped;) b = b.grouped, a += b.y - b.pivotY;
    return a
};
MLE = MLE || {};
MLE.Pin = function (a, b, c, e) {
    this.spriteA = a;
    this.spriteB = b;
    this.offsetX = c;
    this.offsetY = e
};
MLE.Pin.prototype.update = function () {
    this.spriteA.x = this.spriteB.x + this.offsetX;
    this.spriteA.y = this.spriteB.y + this.offsetY
};
MLE.BoxCollision = function (a, b, c, e, d) {
    this.sprite = a;
    this.x = b;
    this.y = c;
    this.w = e;
    this.h = d
};
MLE.BoxCollision.prototype = {
    checkAgainst: function (a) {
        return !(this.x + this.sprite.x >= a.x + a.sprite.x + a.w || this.x + this.sprite.x + this.w <= a.x + a.sprite.x || this.y + this.sprite.y >= a.y + a.sprite.y + a.h || this.y + this.sprite.y + this.h <= a.y + a.sprite.y)
    },
    drawDebug: function () {
        MLE.context.fillStyle = "rgba(0,255,255,0.6)";
        MLE.context.fillRect(this.x + this.sprite.x - MLE.cameraX, this.y + this.sprite.y - MLE.cameraY, this.w, this.h)
    }
};
MLE = MLE || {};
MLE.ImageAnim = function (a) {
    this.sprite = a;
    this.frameW = this.sprite.rect.w;
    this.frameH = this.sprite.rect.h;
    this.anims = {};
    this.currentAnim = null;
    this.stopped = false;
    this.cumulTime = 0
};
MLE.ImageAnim.prototype.addAnim = function (a, b, c) {
    this.anims[a] = {
        fps: c,
        frames: b,
        currentFrame: 0
    };
    this.currentFrame = this.anims[a]
};
MLE.ImageAnim.prototype.gotoAndPlay = function (a, b) {
    if (b) this.currentAnim = this.anims[b];
    var c;
    this.stopped = false;
    this.currentAnim.currentFrame = a || 0;
    this.cumulTime = 0;
    this.updateSpriteRect()
};
MLE.ImageAnim.prototype.gotoAndStop = function (a, b) {
    if (b) this.currentAnim = this.anims[b];
    var c;
    this.stopped = true;
    this.currentAnim.currentFrame = a || 0;
    this.cumulTime = 0;
    this.updateSpriteRect()
};
MLE.ImageAnim.prototype.update = function () {
    if (!(this.stopped || this.currentAnim === null))
        if (this.cumulTime += MLE.tick, this.cumulTime > 1E3 / this.currentAnim.fps) {
            this.cumulTime -= 1E3 / this.currentAnim.fps;
            if (this.currentAnim.currentFrame === this.currentAnim.frames.length - 1 && (this.onLoop(this.currentAnim), this.stopOnLoop)) {
                this.stopped = true;
                this.updateSpriteRect();
                return
            }
            this.currentAnim.currentFrame = (this.currentAnim.currentFrame + 1) % this.currentAnim.frames.length;
            this.onFrameChange(this.currentAnim, this.currentAnim.currentFrame);
            this.updateSpriteRect()
        }
};
MLE.ImageAnim.prototype.updateSpriteRect = function () {
    this.sprite.changeBitmap(this.currentAnim.frames[this.currentAnim.currentFrame])
};
MLE.ImageAnim.prototype.onFrameChange = function () {};
MLE.ImageAnim.prototype.onLoop = function () {};
MLE.ImageAnim.prototype.isPlaying = function (a) {
    return this.currentAnim === this.anims[a] && this.anims[a] ? true : false
};
MouseInput = function () {
    this.screenY = this.screenX = this.y = this.x = 0;
    this.isDown = false;
    this.event = null;
    this.pressed = this.released = this._pressed = this._released = this.useTouch = false
};
MouseInput.prototype = {
    init: function (a) {
        this.domElement = a;
        if ("ontouchstart" in document.documentElement) this.useTouch = true;
        this.startListening()
    },
    startListening: function () {
        this.useTouch === true ? (MLE.wrapper.addEventListener("touchstart", this.touchStart.bind(this), false), MLE.wrapper.addEventListener("touchmove", this.touchMove.bind(this), false), MLE.wrapper.addEventListener("touchend", this.touchEnd.bind(this), false)) : (MLE.wrapper.addEventListener("mousedown", this.onMouseDown.bind(this), false), MLE.wrapper.addEventListener("mousemove",
            this.onMouseMove.bind(this), false), MLE.wrapper.addEventListener("mouseup", this.onMouseUp.bind(this), false))
    },
    stopListening: function () {
        this.useTouch === true ? (MLE.wrapper.removeEventListener("touchmove", this.touchMove.bind(this)), MLE.wrapper.removeEventListener("touchend", this.touchEnd.bind(this))) : (MLE.wrapper.removeEventListener("mousemove", this.onMouseMove.bind(this)), MLE.wrapper.removeEventListener("mouseup", this.onMouseUp.bind(this)));
        window.addEventListener("focus", this.reset.bind(this), false);
        window.addEventListener("blur", this.reset.bind(this), false)
    },
    destroy: function () {
        this.stopListening()
    },
    update: function () {
        this.released = this._released;
        this.pressed = this._pressed;
        this._pressed = this._released = false;
        var a = wrapper.style.width.slice(0, wrapper.style.width.length - 2) / MLE.width,
            b = wrapper.style.height.slice(0, wrapper.style.height.length - 2) / MLE.height;
        a === 0 && (a = b = 1);
        MLE.mouseScale = a;
        this.x = Math.floor((this.screenX - wrapper.offsetLeft) / a);
        this.y = Math.floor((this.screenY - wrapper.offsetTop) / b)
    },
    onMouseMove: function (a) {
        a.preventDefault();
        this.screenX = a.pageX;
        this.screenY = a.pageY
    },
    onMouseDown: function (a) {
        a.preventDefault();
        this._pressed = this.isDown = true;
        this.event = a;
        this.screenX = a.pageX;
        this.screenY = a.pageY;
        this.update();
        MLE.downCallbacks();
        this._pressed = this.isDown = true;
        this.event = a;
        this.screenX = a.pageX;
        this.screenY = a.pageY
    },
    onMouseUp: function (a) {
        if (this.isDown === true) this._released = true, this.isDown = false, this.event = a, this.update(), MLE.upCallbacks(), this._released = true, this.isDown = false, this.event = a
    },
    touchStart: function (a) {
        a.preventDefault();
        this._pressed = this.isDown = true;
        this.screenX = a.targetTouches[0].pageX;
        this.screenY = a.targetTouches[0].pageY;
        this.update();
        MLE.downCallbacks();
        this._pressed = this.isDown = true;
        this.screenX = a.targetTouches[0].pageX;
        this.screenY = a.targetTouches[0].pageY
    },
    touchMove: function (a) {
        a.preventDefault();
        this.screenX = a.targetTouches[0].pageX;
        this.screenY = a.targetTouches[0].pageY
    },
    touchEnd: function () {
        this.isDown = false;
        this._released = true;
        this.update();
        MLE.upCallbacks();
        this.isDown = false;
        this._released = true
    },
    clickEnd: function () {
        gotoSpilSite()
    },
    reset: function () {
        console.log("RESET!!!");
        this.screenY = this.screenX = this.y = this.x = 0;
        this.isDown = false;
        this.event = null;
        this.pressed = this.released = this._pressed = this._released = this.useTouch = false
    }
};
KeyboardInput = function () {
    this.key = 0;
    this._released = this._pressed = this.released = this.pressed = this.hasKeyboard = this.isDown = false
};
KeyboardInput.prototype = {
    init: function () {
        if ("onkeyup" in document.documentElement) this.hasKeyboard = true, this.startListening()
    },
    startListening: function () {
        document.body.addEventListener("keyup", this.keyUp.bind(this), false);
        document.body.addEventListener("keydown", this.keyDown.bind(this), false)
    },
    keyDown: function (a) {
        if (!(this.key == -1 && a.keyCode == 37) && !(this.key == 1 && a.keyCode == 39))
            if (a.keyCode == 37) this.key = -1, this.isDown = this._pressed = true;
            else if (a.keyCode == 39) this.key = 1, this.isDown = this._pressed = true
    },
    keyUp: function (a) {
        this.key == -1 && a.keyCode == 37 ? (this.key = 0, this._released = true, this.isDown = false) : this.key == 1 && a.keyCode == 39 ? (this.key = 0, this._released = true, this.isDown = false) : a.keyCode > 48 && a.keyCode < 56 ? (console.log("Produkuje powerupa", a.keyCode - 48), gameScene && gameScene.spawnPowerUp(Math.random() * (MLE.width - getConst(200)) + getConst(100), Math.random() * getConst(500) + getConst(75), -1, a.keyCode - 48, true)) : a.keyCode === 48 && (console.log("Produkuje rep", a.keyCode - 48), gameScene && gameScene.spawnRepairPart(Math.random() *
            (MLE.width - getConst(200)) + getConst(100), Math.random() * getConst(500) + getConst(75), -1, true))
    },
    update: function () {
        this.released = this._released;
        this.pressed = this._pressed;
        this._pressed = this._released = false
    }
};
MLE = MLE || {};
MLE.FaceFont = function () {};
MLE.FaceFont.prototype.loadFont = function (a) {
    var b = document.createElement("canvas");
    b.width = 64;
    b.height = 64;
    var c = b.getContext("2d"),
        e = setInterval(function () {
            c.clearRect(0, 0, 64, 64);
            c.font = "32px " + a;
            c.fillStyle = "#ffffff";
            c.fillText("test", 32, 32);
            MLE.context.drawImage(b, 100, 100);
            var d = MLE.Util.isCanvasEmpty(b);
            c.font !== "10px sans-serif" && !d && (this.onLoad(a), clearInterval(e))
        }.bind(this), 500)
};
MLE.FaceFont.prototype.onLoad = function () {};
var JSON;
JSON || (JSON = {});
(function () {
    function a(a) {
        return a < 10 ? "0" + a : a
    }

    function b(a) {
        d.lastIndex = 0;
        return d.test(a) ? '"' + a.replace(d, function (a) {
            var b = h[a];
            return typeof b === "string" ? b : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
        }) + '"' : '"' + a + '"'
    }

    function c(a, e) {
        var d, h, m, o, p = f,
            k, j = e[a];
        j && typeof j === "object" && typeof j.toJSON === "function" && (j = j.toJSON(a));
        typeof i === "function" && (j = i.call(e, a, j));
        switch (typeof j) {
        case "string":
            return b(j);
        case "number":
            return isFinite(j) ? String(j) : "null";
        case "boolean":
        case "null":
            return String(j);
        case "object":
            if (!j) return "null";
            f += g;
            k = [];
            if (Object.prototype.toString.apply(j) === "[object Array]") {
                o = j.length;
                for (d = 0; d < o; d += 1) k[d] = c(d, j) || "null";
                m = k.length === 0 ? "[]" : f ? "[\n" + f + k.join(",\n" + f) + "\n" + p + "]" : "[" + k.join(",") + "]";
                f = p;
                return m
            }
            if (i && typeof i === "object") {
                o = i.length;
                for (d = 0; d < o; d += 1) typeof i[d] === "string" && (h = i[d], (m = c(h, j)) && k.push(b(h) + (f ? ": " : ":") + m))
            } else
                for (h in j) Object.prototype.hasOwnProperty.call(j, h) && (m = c(h, j)) && k.push(b(h) + (f ? ": " : ":") + m);
            m = k.length === 0 ? "{}" : f ? "{\n" + f + k.join(",\n" + f) + "\n" + p + "}" : "{" + k.join(",") +
                "}";
            f = p;
            return m
        }
    }
    if (typeof Date.prototype.toJSON !== "function") Date.prototype.toJSON = function () {
        return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + a(this.getUTCMonth() + 1) + "-" + a(this.getUTCDate()) + "T" + a(this.getUTCHours()) + ":" + a(this.getUTCMinutes()) + ":" + a(this.getUTCSeconds()) + "Z" : null
    }, String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function () {
        return this.valueOf()
    };
    var e = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        d = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        f, g, h = {
            "\u0008": "\\b",
            "\t": "\\t",
            "\n": "\\n",
            "\u000c": "\\f",
            "\r": "\\r",
            '"': '\\"',
            "\\": "\\\\"
        },
        i;
    if (typeof JSON.stringify !== "function") JSON.stringify = function (a, b, e) {
        var d;
        g = f = "";
        if (typeof e === "number")
            for (d = 0; d < e; d += 1) g += " ";
        else typeof e === "string" && (g = e); if ((i = b) && typeof b !== "function" && (typeof b !== "object" || typeof b.length !== "number")) throw Error("JSON.stringify");
        return c("", {
            "": a
        })
    };
    if (typeof JSON.parse !== "function") JSON.parse = function (a, b) {
        function c(a, e) {
            var d, f, g = a[e];
            if (g && typeof g === "object")
                for (d in g) Object.prototype.hasOwnProperty.call(g, d) && (f = c(g, d), f !== void 0 ? g[d] = f : delete g[d]);
            return b.call(a, e, g)
        }
        var d, a = String(a);
        e.lastIndex = 0;
        e.test(a) && (a = a.replace(e, function (a) {
            return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
        }));
        if (/^[\],:{}\s]*$/.test(a.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
            "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) return d = eval("(" + a + ")"), typeof b === "function" ? c({
            "": d
        }, "") : d;
        throw new SyntaxError("JSON.parse");
    }
})();
var createjs = this.createjs = this.createjs || {};
(function () {
    var a = function () {
            this.initialize()
        },
        b = a.prototype;
    a.initialize = function (a) {
        a.addEventListener = b.addEventListener;
        a.removeEventListener = b.removeEventListener;
        a.removeAllEventListeners = b.removeAllEventListeners;
        a.hasEventListener = b.hasEventListener;
        a.dispatchEvent = b.dispatchEvent
    };
    b._listeners = null;
    b.initialize = function () {};
    b.addEventListener = function (a, b) {
        var d = this._listeners;
        d ? this.removeEventListener(a, b) : d = this._listeners = {};
        var f = d[a];
        f || (f = d[a] = []);
        f.push(b);
        return b
    };
    b.removeEventListener =
        function (a, b) {
            var d = this._listeners;
            if (d) {
                var f = d[a];
                if (f)
                    for (var g = 0, h = f.length; g < h; g++)
                        if (f[g] == b) {
                            1 == h ? delete d[a] : f.splice(g, 1);
                            break
                        }
            }
        };
    b.removeAllEventListeners = function (a) {
        a ? this._listeners && delete this._listeners[a] : this._listeners = null
    };
    b.dispatchEvent = function (a, b) {
        var d = false,
            f = this._listeners;
        if (a && f) {
            "string" == typeof a && (a = {
                type: a
            });
            a.target = b || this;
            f = f[a.type];
            if (!f) return d;
            for (var f = f.slice(), g = 0, h = f.length; g < h; g++) {
                var i = f[g];
                i instanceof Function ? d = d || i.apply(null, [a]) : i.handleEvent &&
                    (d = d || i.handleEvent(a))
            }
        }
        return !!d
    };
    b.hasEventListener = function (a) {
        var b = this._listeners;
        return !(!b || !b[a])
    };
    b.toString = function () {
        return "[EventDispatcher]"
    };
    createjs.EventDispatcher = a
})();
this.createjs = this.createjs || {};
(function () {
    var a = function (a, b, d) {
            this.initialize(a, b, d)
        },
        b = a.prototype;
    a.NONE = 0;
    a.LOOP = 1;
    a.REVERSE = 2;
    a.IGNORE = {};
    a._tweens = [];
    a._plugins = {};
    a.get = function (b, e, d, f) {
        f && a.removeTweens(b);
        return new a(b, e, d)
    };
    a.tick = function (b, e) {
        for (var d = a._tweens.slice(), f = d.length - 1; 0 <= f; f--) {
            var g = d[f];
            e && !g.ignoreGlobalPause || g._paused || g.tick(g._useTicks ? 1 : b)
        }
    };
    createjs.Ticker && createjs.Ticker.addListener(a, false);
    a.removeTweens = function (b) {
        if (b.tweenjs_count) {
            for (var e = a._tweens, d = e.length - 1; 0 <= d; d--) e[d]._target ==
                b && (e[d]._paused = true, e.splice(d, 1));
            b.tweenjs_count = 0
        }
    };
    a.hasActiveTweens = function (b) {
        return b ? b.tweenjs_count : a._tweens && a._tweens.length
    };
    a.installPlugin = function (b, e) {
        var d = b.priority;
        null == d && (b.priority = d = 0);
        for (var f = 0, g = e.length, h = a._plugins; f < g; f++) {
            var i = e[f];
            if (h[i]) {
                for (var q = h[i], l = 0, t = q.length; l < t && !(d < q[l].priority); l++);
                h[i].splice(l, 0, b)
            } else h[i] = [b]
        }
    };
    a._register = function (b, e) {
        var d = b._target;
        e ? (d && (d.tweenjs_count = d.tweenjs_count ? d.tweenjs_count + 1 : 1), a._tweens.push(b)) : (d && d.tweenjs_count--,
            d = a._tweens.indexOf(b), -1 != d && a._tweens.splice(d, 1))
    };
    b.addEventListener = null;
    b.removeEventListener = null;
    b.removeAllEventListeners = null;
    b.dispatchEvent = null;
    b.hasEventListener = null;
    b._listeners = null;
    createjs.EventDispatcher.initialize(b);
    b.ignoreGlobalPause = false;
    b.loop = false;
    b.duration = 0;
    b.pluginData = null;
    b.onChange = null;
    b.change = null;
    b.target = null;
    b.position = null;
    b._paused = false;
    b._curQueueProps = null;
    b._initQueueProps = null;
    b._steps = null;
    b._actions = null;
    b._prevPosition = 0;
    b._stepPosition = 0;
    b._prevPos = -1;
    b._target = null;
    b._useTicks = false;
    b.initialize = function (b, e, d) {
        this.target = this._target = b;
        e && (this._useTicks = e.useTicks, this.ignoreGlobalPause = e.ignoreGlobalPause, this.loop = e.loop, this.onChange = e.onChange, e.override && a.removeTweens(b));
        this.pluginData = d || {};
        this._curQueueProps = {};
        this._initQueueProps = {};
        this._steps = [];
        this._actions = [];
        e && e.paused ? this._paused = true : a._register(this, true);
        e && null != e.position && this.setPosition(e.position, a.NONE)
    };
    b.wait = function (a) {
        if (null == a || 0 >= a) return this;
        var b =
            this._cloneProps(this._curQueueProps);
        return this._addStep({
            d: a,
            p0: b,
            e: this._linearEase,
            p1: b
        })
    };
    b.to = function (a, b, d) {
        if (isNaN(b) || 0 > b) b = 0;
        return this._addStep({
            d: b || 0,
            p0: this._cloneProps(this._curQueueProps),
            e: d,
            p1: this._cloneProps(this._appendQueueProps(a))
        })
    };
    b.call = function (a, b, d) {
        return this._addAction({
            f: a,
            p: b ? b : [this],
            o: d ? d : this._target
        })
    };
    b.set = function (a, b) {
        return this._addAction({
            f: this._set,
            o: this,
            p: [a, b ? b : this._target]
        })
    };
    b.play = function (a) {
        return this.call(a.setPaused, [false], a)
    };
    b.pause =
        function (a) {
            a || (a = this);
            return this.call(a.setPaused, [true], a)
        };
    b.setPosition = function (a, b) {
        0 > a && (a = 0);
        null == b && (b = 1);
        var d = a,
            f = false;
        d >= this.duration && (this.loop ? d %= this.duration : (d = this.duration, f = true));
        if (d == this._prevPos) return f;
        var g = this._prevPos;
        this.position = this._prevPos = d;
        this._prevPosition = a;
        if (this._target)
            if (f) this._updateTargetProps(null, 1);
            else if (0 < this._steps.length) {
            for (var h = 0, i = this._steps.length; h < i && !(this._steps[h].t > d); h++);
            h = this._steps[h - 1];
            this._updateTargetProps(h, (this._stepPosition =
                d - h.t) / h.d)
        }
        0 != b && 0 < this._actions.length && (this._useTicks ? this._runActions(d, d) : 1 == b && d < g ? (g != this.duration && this._runActions(g, this.duration), this._runActions(0, d, true)) : this._runActions(g, d));
        f && this.setPaused(true);
        this.onChange && this.onChange(this);
        this.dispatchEvent("change");
        return f
    };
    b.tick = function (a) {
        this._paused || this.setPosition(this._prevPosition + a)
    };
    b.setPaused = function (b) {
        this._paused = !!b;
        a._register(this, !b);
        return this
    };
    b.w = b.wait;
    b.t = b.to;
    b.c = b.call;
    b.s = b.set;
    b.toString = function () {
        return "[Tween]"
    };
    b.clone = function () {
        throw "Tween can not be cloned.";
    };
    b._updateTargetProps = function (b, e) {
        var d, f, g, h;
        !b && 1 == e ? d = f = this._curQueueProps : (b.e && (e = b.e(e, 0, 1, 1)), d = b.p0, f = b.p1);
        for (n in this._initQueueProps) {
            if (null == (g = d[n])) d[n] = g = this._initQueueProps[n];
            if (null == (h = f[n])) f[n] = h = g;
            g = g == h || 0 == e || 1 == e || "number" != typeof g ? 1 == e ? h : g : g + (h - g) * e;
            var i = false;
            if (h = a._plugins[n])
                for (var q = 0, l = h.length; q < l; q++) {
                    var t = h[q].tween(this, n, g, d, f, e, !!b && d == f, !b);
                    t == a.IGNORE ? i = true : g = t
                }
            i || (this._target[n] = g)
        }
    };
    b._runActions =
        function (a, b, d) {
            var f = a,
                g = b,
                h = -1,
                i = this._actions.length,
                q = 1;
            for (a > b && (f = b, g = a, h = i, i = q = -1);
                (h += q) != i;) {
                var b = this._actions[h],
                    l = b.t;
                (l == g || l > f && l < g || d && l == a) && b.f.apply(b.o, b.p)
            }
        };
    b._appendQueueProps = function (b) {
        var e, d, f, g, h, i;
        for (i in b) {
            if (void 0 === this._initQueueProps[i]) {
                d = this._target[i];
                if (e = a._plugins[i]) {
                    f = 0;
                    for (g = e.length; f < g; f++) d = e[f].init(this, i, d)
                }
                this._initQueueProps[i] = void 0 === d ? null : d
            } else d = this._curQueueProps[i]; if (e = a._plugins[i]) {
                h = h || {};
                f = 0;
                for (g = e.length; f < g; f++) e[f].step &&
                    e[f].step(this, i, d, b[i], h)
            }
            this._curQueueProps[i] = b[i]
        }
        h && this._appendQueueProps(h);
        return this._curQueueProps
    };
    b._cloneProps = function (a) {
        var b = {},
            d;
        for (d in a) b[d] = a[d];
        return b
    };
    b._addStep = function (a) {
        0 < a.d && (this._steps.push(a), a.t = this.duration, this.duration += a.d);
        return this
    };
    b._addAction = function (a) {
        a.t = this.duration;
        this._actions.push(a);
        return this
    };
    b._set = function (a, b) {
        for (var d in a) b[d] = a[d]
    };
    createjs.Tween = a
})();
this.createjs = this.createjs || {};
(function () {
    var a = function (a, b, d) {
            this.initialize(a, b, d)
        },
        b = a.prototype;
    b.ignoreGlobalPause = false;
    b.duration = 0;
    b.loop = false;
    b.onChange = null;
    b.position = null;
    b._paused = false;
    b._tweens = null;
    b._labels = null;
    b._prevPosition = 0;
    b._prevPos = -1;
    b._useTicks = false;
    b.initialize = function (a, b, d) {
        this._tweens = [];
        d && (this._useTicks = d.useTicks, this.loop = d.loop, this.ignoreGlobalPause = d.ignoreGlobalPause, this.onChange = d.onChange);
        a && this.addTween.apply(this, a);
        this.setLabels(b);
        d && d.paused ? this._paused = true : createjs.Tween._register(this,
            true);
        d && null != d.position && this.setPosition(d.position, createjs.Tween.NONE)
    };
    b.addTween = function (a) {
        var b = arguments.length;
        if (1 < b) {
            for (var d = 0; d < b; d++) this.addTween(arguments[d]);
            return arguments[0]
        }
        if (0 == b) return null;
        this.removeTween(a);
        this._tweens.push(a);
        a.setPaused(true);
        a._paused = false;
        a._useTicks = this._useTicks;
        a.duration > this.duration && (this.duration = a.duration);
        0 <= this._prevPos && a.setPosition(this._prevPos, createjs.Tween.NONE);
        return a
    };
    b.removeTween = function (a) {
        var b = arguments.length;
        if (1 <
            b) {
            for (var d = true, f = 0; f < b; f++) d = d && this.removeTween(arguments[f]);
            return d
        }
        if (0 == b) return false;
        b = this._tweens.indexOf(a);
        return -1 != b ? (this._tweens.splice(b, 1), a.duration >= this.duration && this.updateDuration(), true) : false
    };
    b.addLabel = function (a, b) {
        this._labels[a] = b
    };
    b.setLabels = function (a) {
        this._labels = a ? a : {}
    };
    b.gotoAndPlay = function (a) {
        this.setPaused(false);
        this._goto(a)
    };
    b.gotoAndStop = function (a) {
        this.setPaused(true);
        this._goto(a)
    };
    b.setPosition = function (a, b) {
        0 > a && (a = 0);
        var d = this.loop ? a % this.duration :
            a,
            f = !this.loop && a >= this.duration;
        if (d == this._prevPos) return f;
        this._prevPosition = a;
        this.position = this._prevPos = d;
        for (var g = 0, h = this._tweens.length; g < h; g++)
            if (this._tweens[g].setPosition(d, b), d != this._prevPos) return false;
        f && this.setPaused(true);
        this.onChange && this.onChange(this);
        return f
    };
    b.setPaused = function (a) {
        this._paused = !!a;
        createjs.Tween._register(this, !a)
    };
    b.updateDuration = function () {
        for (var a = this.duration = 0, b = this._tweens.length; a < b; a++) tween = this._tweens[a], tween.duration > this.duration &&
            (this.duration = tween.duration)
    };
    b.tick = function (a) {
        this.setPosition(this._prevPosition + a)
    };
    b.resolve = function (a) {
        var b = parseFloat(a);
        isNaN(b) && (b = this._labels[a]);
        return b
    };
    b.toString = function () {
        return "[Timeline]"
    };
    b.clone = function () {
        throw "Timeline can not be cloned.";
    };
    b._goto = function (a) {
        a = this.resolve(a);
        null != a && this.setPosition(a)
    };
    createjs.Timeline = a
})();
this.createjs = this.createjs || {};
(function () {
    var a = function () {
        throw "Ease cannot be instantiated.";
    };
    a.linear = function (a) {
        return a
    };
    a.none = a.linear;
    a.get = function (a) {
        -1 > a && (a = -1);
        1 < a && (a = 1);
        return function (c) {
            return 0 == a ? c : 0 > a ? c * (c * -a + 1 + a) : c * ((2 - c) * a + (1 - a))
        }
    };
    a.getPowIn = function (a) {
        return function (c) {
            return Math.pow(c, a)
        }
    };
    a.getPowOut = function (a) {
        return function (c) {
            return 1 - Math.pow(1 - c, a)
        }
    };
    a.getPowInOut = function (a) {
        return function (c) {
            return 1 > (c *= 2) ? 0.5 * Math.pow(c, a) : 1 - 0.5 * Math.abs(Math.pow(2 - c, a))
        }
    };
    a.quadIn = a.getPowIn(2);
    a.quadOut =
        a.getPowOut(2);
    a.quadInOut = a.getPowInOut(2);
    a.cubicIn = a.getPowIn(3);
    a.cubicOut = a.getPowOut(3);
    a.cubicInOut = a.getPowInOut(3);
    a.quartIn = a.getPowIn(4);
    a.quartOut = a.getPowOut(4);
    a.quartInOut = a.getPowInOut(4);
    a.quintIn = a.getPowIn(5);
    a.quintOut = a.getPowOut(5);
    a.quintInOut = a.getPowInOut(5);
    a.sineIn = function (a) {
        return 1 - Math.cos(a * Math.PI / 2)
    };
    a.sineOut = function (a) {
        return Math.sin(a * Math.PI / 2)
    };
    a.sineInOut = function (a) {
        return -0.5 * (Math.cos(Math.PI * a) - 1)
    };
    a.getBackIn = function (a) {
        return function (c) {
            return c *
                c * ((a + 1) * c - a)
        }
    };
    a.backIn = a.getBackIn(1.7);
    a.getBackOut = function (a) {
        return function (c) {
            return --c * c * ((a + 1) * c + a) + 1
        }
    };
    a.backOut = a.getBackOut(1.7);
    a.getBackInOut = function (a) {
        a *= 1.525;
        return function (c) {
            return 1 > (c *= 2) ? 0.5 * c * c * ((a + 1) * c - a) : 0.5 * ((c -= 2) * c * ((a + 1) * c + a) + 2)
        }
    };
    a.backInOut = a.getBackInOut(1.7);
    a.circIn = function (a) {
        return -(Math.sqrt(1 - a * a) - 1)
    };
    a.circOut = function (a) {
        return Math.sqrt(1 - --a * a)
    };
    a.circInOut = function (a) {
        return 1 > (a *= 2) ? -0.5 * (Math.sqrt(1 - a * a) - 1) : 0.5 * (Math.sqrt(1 - (a -= 2) * a) + 1)
    };
    a.bounceIn =
        function (b) {
            return 1 - a.bounceOut(1 - b)
        };
    a.bounceOut = function (a) {
        return a < 1 / 2.75 ? 7.5625 * a * a : a < 2 / 2.75 ? 7.5625 * (a -= 1.5 / 2.75) * a + 0.75 : a < 2.5 / 2.75 ? 7.5625 * (a -= 2.25 / 2.75) * a + 0.9375 : 7.5625 * (a -= 2.625 / 2.75) * a + 0.984375
    };
    a.bounceInOut = function (b) {
        return 0.5 > b ? 0.5 * a.bounceIn(2 * b) : 0.5 * a.bounceOut(2 * b - 1) + 0.5
    };
    a.getElasticIn = function (a, c) {
        var e = 2 * Math.PI;
        return function (d) {
            if (0 == d || 1 == d) return d;
            var f = c / e * Math.asin(1 / a);
            return -(a * Math.pow(2, 10 * (d -= 1)) * Math.sin((d - f) * e / c))
        }
    };
    a.elasticIn = a.getElasticIn(1, 0.3);
    a.getElasticOut =
        function (a, c) {
            var e = 2 * Math.PI;
            return function (d) {
                if (0 == d || 1 == d) return d;
                var f = c / e * Math.asin(1 / a);
                return a * Math.pow(2, -10 * d) * Math.sin((d - f) * e / c) + 1
            }
        };
    a.elasticOut = a.getElasticOut(1, 0.3);
    a.getElasticInOut = function (a, c) {
        var e = 2 * Math.PI;
        return function (d) {
            var f = c / e * Math.asin(1 / a);
            return 1 > (d *= 2) ? -0.5 * a * Math.pow(2, 10 * (d -= 1)) * Math.sin((d - f) * e / c) : 0.5 * a * Math.pow(2, -10 * (d -= 1)) * Math.sin((d - f) * e / c) + 1
        }
    };
    a.elasticInOut = a.getElasticInOut(1, 0.3 * 1.5);
    createjs.Ease = a
})();
this.createjs = this.createjs || {};
(function () {
    var a = function () {
        throw "MotionGuidePlugin cannot be instantiated.";
    };
    a.priority = 0;
    a.install = function () {
        createjs.Tween.installPlugin(a, ["guide", "x", "y", "rotation"]);
        return createjs.Tween.IGNORE
    };
    a.init = function (a, c, e) {
        a = a.target;
        a.hasOwnProperty("x") || (a.x = 0);
        a.hasOwnProperty("y") || (a.y = 0);
        a.hasOwnProperty("rotation") || (a.rotation = 0);
        return "guide" == c ? null : e
    };
    a.step = function (b, c, e, d, f) {
        if ("guide" != c) return d;
        var g;
        d.hasOwnProperty("path") || (d.path = []);
        b = d.path;
        d.hasOwnProperty("end") || (d.end =
            1);
        d.hasOwnProperty("start") || (d.start = e && e.hasOwnProperty("end") && e.path === b ? e.end : 0);
        if (d.hasOwnProperty("_segments") && d._length) return d;
        e = b.length;
        if (6 <= e && 0 == (e - 2) % 4) {
            d._segments = [];
            d._length = 0;
            for (c = 2; c < e; c += 4) {
                for (var h = b[c - 2], i = b[c - 1], q = b[c + 0], l = b[c + 1], t = b[c + 2], v = b[c + 3], m = h, o = i, p, k, j = 0, s = [], u = 1; 10 >= u; u++) {
                    k = u / 10;
                    var r = 1 - k;
                    p = r * r * h + 2 * r * k * q + k * k * t;
                    k = r * r * i + 2 * r * k * l + k * k * v;
                    j += s[s.push(Math.sqrt((g = p - m) * g + (g = k - o) * g)) - 1];
                    m = p;
                    o = k
                }
                d._segments.push(j);
                d._segments.push(s);
                d._length += j
            }
        } else throw "invalid 'path' data, please see documentation for valid paths";
        g = d.orient;
        d.orient = false;
        a.calc(d, d.end, f);
        d.orient = g;
        return d
    };
    a.tween = function (b, c, e, d, f, g, h) {
        f = f.guide;
        if (void 0 == f || f === d.guide) return e;
        f.lastRatio != g && (a.calc(f, (f.end - f.start) * (h ? f.end : g) + f.start, b.target), f.orient && (b.target.rotation += d.rotation || 0), f.lastRatio = g);
        return !f.orient && "rotation" == c ? e : b.target[c]
    };
    a.calc = function (b, c, e) {
        void 0 == b._segments && a.validate(b);
        void 0 == e && (e = {
            x: 0,
            y: 0,
            rotation: 0
        });
        for (var d = b._segments, f = b.path, g = b._length * c, h = d.length - 2, c = 0; g > d[c] && c < h;) g -= d[c], c += 2;
        for (var d = d[c + 1], i = 0, h = d.length - 1; g > d[i] && i < h;) g -= d[i], i++;
        g = i / ++h + g / (h * d[i]);
        c = 2 * c + 2;
        h = 1 - g;
        e.x = h * h * f[c - 2] + 2 * h * g * f[c + 0] + g * g * f[c + 2];
        e.y = h * h * f[c - 1] + 2 * h * g * f[c + 1] + g * g * f[c + 3];
        b.orient && (e.rotation = 57.2957795 * Math.atan2((f[c + 1] - f[c - 1]) * h + (f[c + 3] - f[c + 1]) * g, (f[c + 0] - f[c - 2]) * h + (f[c + 2] - f[c + 0]) * g));
        return e
    };
    createjs.MotionGuidePlugin = a
})();
(function () {
    var a = this.createjs = this.createjs || {},
        a = a.TweenJS = a.TweenJS || {};
    a.version = "0.4.0";
    a.buildDate = "Tue, 12 Feb 2013 21:09:02 GMT"
})();

function PxLoader(a) {
    a = a || {};
    if (a.statusInterval == null) a.statusInterval = 5E3;
    if (a.loggingDelay == null) a.loggingDelay = 2E4;
    if (a.noProgressTimeout == null) a.noProgressTimeout = Infinity;
    var b = [],
        c = [],
        e, d = +new Date;
    this.add = function (a) {
        a.tags = new PxLoaderTags(a.tags);
        if (a.priority == null) a.priority = Infinity;
        b.push({
            resource: a,
            status: 0
        })
    };
    this.addProgressListener = function (a, b) {
        c.push({
            callback: a,
            tags: new PxLoaderTags(b)
        })
    };
    this.addCompletionListener = function (a, b) {
        c.push({
            tags: new PxLoaderTags(b),
            callback: function (b) {
                b.completedCount ===
                    b.totalCount && a(b)
            }
        })
    };
    var f = function (a) {
        var a = a == null ? [] : Array.isArray(a) ? a : [a],
            b = function (b) {
                for (var b = b.resource, c = Infinity, d = 0; d < b.tags.length; d++)
                    for (var e = 0; e < Math.min(a.length, c); e++) {
                        if (b.tags[d] == a[e] && e < c && (c = e, c === 0)) break;
                        if (c === 0) break
                    }
                return c
            };
        return function (a, c) {
            var d = b(a),
                e = b(c);
            return d < e ? -1 : d > e ? 1 : a.priority < c.priority ? -1 : a.priority > c.priority ? 1 : 0
        }
    };
    this.start = function (a) {
        e = +new Date;
        a = f(a);
        b.sort(a);
        for (var a = 0, c = b.length; a < c; a++) {
            var d = b[a];
            d.status = 1;
            d.resource.start(this)
        }
        setTimeout(g,
            100)
    };
    var g = function () {
        for (var c = false, e = +new Date - d, f = e >= a.noProgressTimeout, e = e >= a.loggingDelay, h = 0, m = b.length; h < m; h++) {
            var o = b[h];
            if (o.status === 1 && (o.resource.checkStatus && o.resource.checkStatus(), o.status === 1))
                if (f) o.resource.onTimeout();
                else c = true
        }
        e && c && i();
        c && setTimeout(g, a.statusInterval)
    };
    this.isBusy = function () {
        for (var a = 0, c = b.length; a < c; a++)
            if (b[a].status === 0 || b[a].status === 1) return true;
        return false
    };
    var h = function (a, e) {
        for (var f = null, g = 0, h = b.length; g < h; g++)
            if (b[g].resource === a) {
                f = b[g];
                break
            }
        if (!(f == null || f.status !== 1)) {
            f.status = e;
            d = +new Date;
            g = 0;
            for (h = c.length; g < h; g++) {
                var i = c[g];
                if (i.tags.length === 0 || a.tags.contains(i.tags)) {
                    for (var p = f, k = 0, j = 0, s = 0, u = b.length; s < u; s++) {
                        var r = b[s],
                            w = false;
                        if (w = i.tags.length === 0 ? true : r.resource.tags.contains(i.tags)) j++, (r.status === 2 || r.status === 3 || r.status === 4) && k++
                    }
                    i.callback({
                        resource: p.resource,
                        loaded: p.status === 2,
                        error: p.status === 3,
                        timeout: p.status === 4,
                        completedCount: k,
                        totalCount: j
                    })
                }
            }
        }
    };
    this.onLoad = function (a) {
        h(a, 2)
    };
    this.onError = function (a) {
        h(a,
            3)
    };
    this.onTimeout = function (a) {
        h(a, 4)
    };
    var i = this.log = function (a) {
        if (window.console) {
            var c = Math.round((+new Date - e) / 1E3);
            window.console.log("PxLoader elapsed: " + c + " sec");
            for (var c = 0, d = b.length; c < d; c++) {
                var f = b[c];
                if (a || f.status === 1) {
                    var g = "PxLoader: #" + c + " " + f.resource.getName();
                    switch (f.status) {
                    case 0:
                        g += " (Not Started)";
                        break;
                    case 1:
                        g += " (Waiting)";
                        break;
                    case 2:
                        g += " (Loaded)";
                        break;
                    case 3:
                        g += " (Error)";
                        break;
                    case 4:
                        g += " (Timeout)"
                    }
                    f.resource.tags.length > 0 && (g += " Tags: [" + f.resource.tags.array.join(",") +
                        "]");
                    window.console.log(g)
                }
            }
        }
    }
}

function PxLoaderTags(a) {
    this.array = [];
    this.object = {};
    this.value = null;
    this.length = 0;
    if (a !== null && a !== void 0) {
        if (Array.isArray(a)) this.array = a;
        else if (typeof a === "object")
            for (var b in a) this.array.push(b);
        else this.array.push(a), this.value = a;
        this.length = this.array.length;
        for (a = 0; a < this.length; a++) this.object[this.array[a]] = true
    }
    this.contains = function (a) {
        if (this.length === 0 || a.length === 0) return false;
        else if (this.length === 1 && this.value !== null) return a.length === 1 ? this.value === a.value : a.object.hasOwnProperty(this.value);
        else if (a.length < this.length) return a.contains(this);
        else {
            for (var b in this.object)
                if (a.object[b]) return true;
            return false
        }
    }
}
if (!Array.isArray) Array.isArray = function (a) {
    return Object.prototype.toString.call(a) == "[object Array]"
};

function PxLoaderImage(a, b, c) {
    var e = this,
        d = null;
    this.img = new Image;
    this.tags = b;
    this.priority = c;
    var f = function () {
            e.img.readyState == "complete" && (i(), d.onLoad(e))
        },
        g = function () {
            i();
            d.onLoad(e)
        },
        h = function () {
            i();
            d.onError(e)
        },
        i = function () {
            e.unbind("load", g);
            e.unbind("readystatechange", f);
            e.unbind("error", h)
        };
    this.start = function (b) {
        d = b;
        e.bind("load", g);
        e.bind("readystatechange", f);
        e.bind("error", h);
        e.img.src = a
    };
    this.checkStatus = function () {
        e.img.complete && (i(), d.onLoad(e))
    };
    this.onTimeout = function () {
        i();
        if (e.img.complete) d.onLoad(e);
        else d.onTimeout(e)
    };
    this.getName = function () {
        return a
    };
    this.bind = function (a, b) {
        e.img.addEventListener ? e.img.addEventListener(a, b, false) : e.img.attachEvent && e.img.attachEvent("on" + a, b)
    };
    this.unbind = function (a, b) {
        e.img.removeEventListener ? e.img.removeEventListener(a, b, false) : e.img.detachEvent && e.img.detachEvent("on" + a, b)
    }
}
PxLoader.prototype.addImage = function (a, b, c) {
    a = new PxLoaderImage(a, b, c);
    this.add(a);
    return a.img
};
var Director = function () {
    window.director = this;
    this.init()
};
Director.prototype.init = function () {
    window.game = this;
    this.menu = this.currentScene = new MainMenu;
    this.nextScene = null;
    this.rectAlpha = 1;
    this.rectColor = "#000000";
    createjs.Tween.get(this).to({
        rectAlpha: 0
    }, 500, createjs.Ease.sineInOut)
};
Director.prototype.update = function () {
    this.currentScene && this.currentScene.update()
};
Director.prototype.draw = function () {
    this.currentScene && this.currentScene.draw();
    if (this.nextScene) this.currentScene = this.nextScene, this.nextScene = null, MLE.cameraX = MLE.cameraY = 0;
    if (this.rectAlpha > 0) MLE.context.fillStyle = this.rectColor, MLE.context.globalAlpha = this.rectAlpha, MLE.context.fillRect(0, 0, MLE.width, MLE.height), MLE.context.globalAlpha = 1
};
var PreLoaderScene = function () {
    this.init()
};
PreLoaderScene.prototype.init = function () {
    window.preloaderScene = this;
    this.logo = new MLE.Sprite("logoWithoutRim", 0, getConst(-100));
    this.logo.centerPivot();
    this.loadingBar1 = new MLE.Sprite("loadingBar1", 0, getConst(150));
    this.loadingBar1.centerPivot();
    this.loadingBar0 = new MLE.Sprite("loadingBar0", 0, getConst(150));
    this.loadingBar0.centerPivot();
    this.group = new MLE.Group;
    this.rimX = getConst(204);
    this.rimY = getConst(-164);
    this.rimR = getConst(17);
    this.rim = new MLE.Sprite("rim", this.rimX, this.rimY);
    this.rim.centerPivot();
    this.eyeAnim = new MLE.Sprite("eyeAnim", this.rimX, this.rimY);
    this.eyeAnim.centerPivot();
    this.eyeAnimFA = new MLE.FrameAnim(this.eyeAnim, 4, 1);
    this.eyeAnimFA.addAnim("blink", [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 20);
    this.eyeAnimFA.gotoAndPlay(0, "blink");
    this.loadingText = new MLE.Sprite("loadingTextAnim", 0, getConst(230));
    this.loadingText.centerPivot();
    this.loadingTextFA = new MLE.FrameAnim(this.loadingText, 1, 4);
    this.loadingTextFA.addAnim("loading", [0, 1, 2, 3], 4);
    this.loadingTextFA.gotoAndPlay(0, "loading");
    //this.group.addChild(this.logo); -> dev credits
    this.group.addChild(this.loadingBar1);
    this.group.addChild(this.loadingBar0);
    //this.group.addChild(this.loadingText);
    //this.group.addChild(this.rim); -> dev credits
    //this.group.addChild(this.eyeAnim); -> dev credits
    this.group.x = MLE.width / 2;
    this.group.y = MLE.height / 2;
    this.fullBarsWidth = this.loadingBar0.rect.w;
    this.createRimTween();
    this.group.scaleX = this.group.scaleY = 0.85;
    this.loaded = false
};
PreLoaderScene.prototype.update = function () {
    this.loadingTextFA.update();
    this.eyeAnimFA.update();
    this.percent = MLE.loader.loadedResources / MLE.loader.allResources * 100;
    this.loadingBar0.rect.w = this.percent * this.fullBarsWidth / 100;
    if (this.loadingBar0.rect.w === 0) this.loadingBar0.rect.w = 1;
    if (this.percent === 100 && this.loaded === false) this.loaded = true, createjs.Tween.get(this).wait(2E3).call(function () {
        MLE.start()
    })
};
PreLoaderScene.prototype.draw = function () {
    MLE.context.fillStyle = "#45357D";
    MLE.context.fillRect(0, 0, MLE.width, MLE.height);
    this.group.draw()
};
PreLoaderScene.prototype.createRimTween = function () {
    var a = Math.random() * 6.28,
        b = Math.random() * this.rimR * 0.6 + 0.4 * this.rimR,
        c = Math.sin(a) * b,
        a = Math.cos(a) * b,
        b = 1 - Math.abs(c / this.rimR * 0.08),
        e = 1 - Math.abs(a / this.rimR * 0.08),
        d = Math.random() * 1500 + 1500,
        f = Math.random() * 1E3 + 500;
    createjs.Tween.get(this.rim).wait(f).to({
        x: this.rimX - c,
        y: this.rimY - a,
        scaleX: b,
        scaleY: e
    }, 250, createjs.Ease.sineOut).wait(f).to({
        x: this.rimX,
        y: this.rimY,
        scaleX: 1,
        scaleY: 1
    }, 250, createjs.Ease.sineOut).wait(d).call(this.createRimTween, null, this)
};
var MenuButton = function (a, b, c) {
    this.init(a, b, c)
};
MenuButton.prototype.init = function (a, b, c) {
    this.group = new MLE.Group;
    a = a || "pause";
    this.buttonDown = this.buttonUp = null;
    this.touchEventTarget = new MLE.TouchEventTarget(this.group);
    this.touchEventTarget.onDown = this.onDown.bind(this);
    this.touchEventTarget.onUp = this.onUp.bind(this);
    this.touchEventTarget.onOut = this.onOut.bind(this);
    this.buttonUp = new MLE.Sprite(a + "_normal", 0, 0);
    this.buttonDown = new MLE.Sprite(a + "_select", 0, 0);
    var a = this.buttonUp.rect.w,
        e = this.buttonUp.rect.h;
    this.touchEventTarget.setArea(-a /
        2, -e / 2, a, e);
    this.buttonUp.centerPivot();
    this.buttonDown.centerPivot();
    this.buttonDown.alpha = 0;
    this.group.addChild(this.buttonUp);
    this.group.addChild(this.buttonDown);
    if (b) this.text = new MLE.TextSprite, this.text.text = b, this.text.x = 0, this.text.y = 0, this.text.align = "center", this.text.baseline = "middle", this.text.adjustFontSize(250), this.group.addChild(this.text);
    if (c) this.comment = new MLE.TextSprite, this.comment.text = c, this.comment.x = 0, this.comment.y = 30, this.comment.size = 18, this.comment.align = "center", this.comment.baseline =
        "middle", this.comment.adjustFontSize(280), this.group.addChild(this.comment);
    this.block = this.canBePressed = false
};
MenuButton.prototype.update = function () {
    this.block || this.touchEventTarget.update()
};
MenuButton.prototype.draw = function () {
    this.group.draw()
};
MenuButton.prototype.onUp = function () {
    if (this.canBePressed) this.clickCallback(), this.canBePressed = false, this.buttonUp.alpha = 1, this.buttonDown.alpha = 0
};
MenuButton.prototype.onDown = function () {
    this.canBePressed = true;
    this.buttonUp.alpha = 0;
    this.buttonDown.alpha = 1
};
MenuButton.prototype.onOut = function () {
    this.canBePressed = false;
    this.buttonUp.alpha = 1;
    this.buttonDown.alpha = 0
};
MenuButton.prototype.clickCallback = function () {
    console.log("ButtonClickCallback")
};
MenuButton.prototype.isDown = function () {
    return this.buttonUp.alpha === 1 ? false : true
};
var MainMenu = function () {
    window.mainMenu = this;
    this.init()
};
MainMenu.prototype.init = function () {
    this.bg = new MLE.Sprite("splash", 0, 0);
    this.playButton = new MenuButton("button", currLang.startGame);
    this.playButton.group.x = MLE.width / 2;
    this.playButton.group.y = MLE.height / 2 + 170;
    this.playButton.clickCallback = this.startGameClicked.bind(this);
    this.moreGames = new MenuButton("button", currLang.moreGames);
    this.moreGames.group.x = MLE.width / 2;
    this.moreGames.group.y = MLE.height / 2 + 290;
    this.moreGames.clickCallback = this.moreGamesClicked.bind(this);
    var a = 0;
    localStorage.FurEyeGamesFeedTheMonsterBestScore &&
        (a = Number(localStorage.FurEyeGamesFeedTheMonsterBestScore));
    this.best = new MLE.TextSprite;
    this.best.text = currLang.best + ": " + a;
    this.best.x = MLE.width / 2;
    this.best.y = MLE.height / 2 - 15;
    this.best.align = "center";
    this.best.baseline = "middle";
    this.best.adjustFontSize(250);
    this.lvl = new MLE.TextSprite;
    this.lvl.text = currLang.selectLevel + ":";
    this.lvl.x = MLE.width / 2;
    this.lvl.y = MLE.height / 2 - 15;
    this.lvl.align = "center";
    this.lvl.baseline = "middle";
    this.lvl.adjustFontSize(250);
    this.lvl.alpha = 0;
    var b = MLE.height / 2 + 70;
    this.easyButton =
        new MenuButton("button", currLang.easy);
    this.easyButton.group.x = MLE.width + 200;
    this.easyButton.group.y = b + 0;
    this.easyButton.group.alpha = 0;
    this.easyButton.clickCallback = this.easyButtonClicked.bind(this);
    a < params.pointsForMedium ? (this.mediumButton = new MenuButton("button", currLang.medium, "(" + currLang.youNeed + " " + params.pointsForMedium + " " + currLang.youNeed2 + ")"), this.mediumButton.block = true) : this.mediumButton = new MenuButton("button", currLang.medium);
    this.mediumButton.group.alpha = 0;
    this.mediumButton.group.x =
        MLE.width + 200;
    this.mediumButton.group.y = b + 120;
    this.mediumButton.clickCallback = this.mediumButtonClicked.bind(this);
    a < params.pointsForHard ? (this.hardButton = new MenuButton("button", currLang.hard, "(" + currLang.youNeed + " " + params.pointsForHard + " " + currLang.youNeed2 + ")"), this.hardButton.block = true) : this.hardButton = new MenuButton("button", currLang.hard);
    this.hardButton.group.x = MLE.width + 200;
    this.hardButton.group.y = b + 240;
    this.hardButton.group.alpha = 0;
    this.hardButton.clickCallback = this.hardButtonClicked.bind(this);
    this.active = false;
    createjs.Tween.get(this).wait(750).call(function () {
        this.active = true
    }.bind(this))
};
MainMenu.prototype.update = function () {
    this.active && (this.playButton.update(), this.moreGames.update(), this.easyButton.update(), this.mediumButton.update(), this.hardButton.update())
};
MainMenu.prototype.draw = function () {
    MLE.context.imageSmoothingEnabled = true;
    this.bg.draw();
    this.playButton.draw();
    this.moreGames.draw();
    this.best.draw();
    this.lvl.draw();
    this.easyButton.draw();
    this.mediumButton.draw();
    this.hardButton.draw()
};
MainMenu.prototype.startGameClicked = function () {
    this.active = false;
    createjs.Tween.get(this.best).to({
        alpha: 0
    }, 250);
    createjs.Tween.get(this.lvl).wait(250).to({
        alpha: 1
    }, 250);
    createjs.Tween.get(this.playButton.group).to({
        x: -200,
        alpha: 0
    }, 750, createjs.Ease.backIn);
    createjs.Tween.get(this.moreGames.group).wait(200).to({
        x: -200,
        alpha: 0
    }, 750, createjs.Ease.backIn);
    createjs.Tween.get(this.easyButton.group).wait(500).to({
        x: MLE.width / 2,
        alpha: 1
    }, 400, createjs.Ease.sineOut);
    createjs.Tween.get(this.mediumButton.group).wait(700).to({
        x: MLE.width /
            2,
        alpha: this.mediumButton.block ? 0.6 : 1
    }, 400, createjs.Ease.sineOut);
    createjs.Tween.get(this.hardButton.group).wait(900).to({
        x: MLE.width / 2,
        alpha: this.hardButton.block ? 0.6 : 1
    }, 400, createjs.Ease.sineOut).wait(0).call(function () {
        this.active = true
    }.bind(this))
};
MainMenu.prototype.moreGamesClicked = function () {
    //window.location.href = "http://softgames.de"
    SG.redirectToPortal();
};
MainMenu.prototype.easyButtonClicked = function () {
    SG_Hooks.start();
    this.playButton.block = true;
    createjs.Tween.get(window.director).to({
        rectAlpha: 1
    }, 250, createjs.Ease.sineInOut).call(function () {
        createjs.Tween._tweens = [];
        window.director.nextScene = new GameScene;
        createjs.Tween.get(window.director).to({
            rectAlpha: 0
        }, 500, createjs.Ease.sineInOut).call(function () {
            window.director.currentScene.startGame()
        })
    })
};
MainMenu.prototype.mediumButtonClicked = function () {
    SG_Hooks.start();
    this.playButton.block = true;
    createjs.Tween.get(window.director).to({
        rectAlpha: 1
    }, 250, createjs.Ease.sineInOut).call(function () {
        createjs.Tween._tweens = [];
        window.director.nextScene = new GameScene2;
        createjs.Tween.get(window.director).to({
            rectAlpha: 0
        }, 500, createjs.Ease.sineInOut).call(function () {
            window.director.currentScene.startGame()
        })
    })
};
MainMenu.prototype.hardButtonClicked = function () {
    SG_Hooks.start();
    this.playButton.block = true;
    createjs.Tween.get(window.director).to({
        rectAlpha: 1
    }, 250, createjs.Ease.sineInOut).call(function () {
        createjs.Tween._tweens = [];
        window.director.nextScene = new GameScene3;
        createjs.Tween.get(window.director).to({
            rectAlpha: 0
        }, 500, createjs.Ease.sineInOut).call(function () {
            window.director.currentScene.startGame()
        })
    })
};
var GameScene = function () {
    window.gameScene = this;
    this.states = {
        IDLE: 0,
        AIMING: 1,
        BEFORE_WIND: 2,
        IN_AIR_UP: 3,
        IN_AIR: 4,
        FROM_WALL: 5,
        FROM_GROUND: 6
    };
    this.currentState = this.states.IDLE;
    this.ground = -1;
    this.maxHeight = getConst(50);
    var a = Math.floor(Math.random() * 59) / 10;
    this.windPower = getConst(1E3) * a / 6;
    this.minScale = 0.35;
    this.init();
    this.gui.bestNumber < 2E3 && (a = Math.floor(Math.random() * 8) / 10 + 0.1);
    this.windCloud.windFont.text = a + "";
    this.windCloud.windNumber = a;
    this.windPower = getConst(1E3) * a / 6
};
GameScene.prototype.init = function () {
    this.bg = new MLE.Sprite("gameBackground", 0, 0);
    this.windCloud = new WindCloud;
    this.windCloud.group.x = 0;
    this.windCloud.group.y = getConst(520);
    this.aimArrow = new AimArrow;
    this.aimArrow.sprite.alpha = 0;
    this.ball = new Ball;
    this.fanAnim = new FanAnim;
    this.pauseButton = new MenuButton("pause");
    this.pauseButton.group.x = MLE.width - 50;
    this.pauseButton.group.y = MLE.height - 50;
    this.pauseButton.clickCallback = this.pauseClicked.bind(this);
    this.monsterFront = new MLE.Sprite("goalFront", 0, 0);
    this.monsterFront.centerPivot();
    this.monster = new Monster;
    this.monster.setPositionXY(MLE.width / 2, MLE.height / 2 + getConst(315));
    this.shadow = new MLE.Sprite("shadow", this.ball.startPosX, this.ball.startPosY + getConst(30));
    this.shadow.centerPivot();
    this.shadow.scaleX = this.shadow.scaleY = 0.6;
    this.gui = new GUI(1);
    this.hideShowFrontMonsters(false);
    this.gui.alpha = 1;
    this.aimArrow.rotationTween.setPosition(1350);
    this.monster.setScaleX(1.5);
    this.isEasyLevel = false;
    this.easyLevelCounter = this.easyLevel = 0;
    if (this.gui.bestNumber < 2E3) this.isEasyLevel =
        true;
    this.createNewBall();
    this.pauseWindow = new PauseWindow;
    this.paused = false
};
GameScene.prototype.update = function () {
    this.pauseWindow.update();
    this.fanAnim.update();
    if (!this.paused) {
        this.windCloud.update();
        this.monster.update();
        this.gui.update();
        this.ball.update();
        this.pauseButton.update();
        var a = !this.pauseButton.isDown() && MLE.mouse.pressed && this.ball.sprite.x === this.ball.startPosX && this.ball.sprite.y === this.ball.startPosY && this.aimArrow.sprite.alpha >= 0.75;
        this.shadow.x = this.ball.sprite.x;
        this.aimArrow.update();
        if (a && this.currentState === this.states.IDLE) this.currentState = this.states.AIMING;
        else if (a && this.currentState === this.states.AIMING) this.ball.makeShoot(this.aimArrow.shotDirectionX, this.aimArrow.shotDirectionY, this.aimArrow.shootAngle), this.makeShadowTween(), this.ball.rotateFast(), this.currentState = this.states.BEFORE_WIND, this.aimArrow.stopRotationTween();
        else if (this.currentState === this.states.IN_AIR_UP && this.ball.simpleMovement.velY > 0) this.currentState = this.states.IN_AIR, this.hideShowFrontMonsters(true);
        else if (this.currentState === this.states.IN_AIR || this.currentState === this.states.FROM_WALL ||
            this.currentState === this.states.FROM_GROUND) {
            for (var a = this.monster.circleCollisions, b = this.ball.circleCollision, c = true, e = 0; e < a.length && c; e++)
                if (a[e].checkAgainstWithPosCorrection(b, this.ball.befX, this.ball.befY) !== null && this.currentState !== this.states.FROM_WALL) c = false, e < 2 && this.ball.sprite.y < a[e].y + a[e].sprite.y - getConst(12) ? (this.ball.simpleMovement.velX = e === 1 ? getConst(50) : getConst(-50), this.ball.simpleMovement.accelX = 0, this.ball.simpleMovement.velY = getConst(-300), this.ball.simpleMovement.accelY =
                    getConst(800)) : (this.ball.simpleMovement.velX = this.ball.sprite.x > a[e].x + a[e].sprite.x ? getConst(130) : getConst(-130), this.ball.simpleMovement.accelX = 0), this.currentState = this.states.FROM_WALL, this.ball.rotateSlow();
            if (this.monster.pointDetector.checkAgainstWithShift(this.ball.circleCollision, this.ball.befX, this.ball.befY) !== null) {
                this.ball.simpleMovement.velX = 0;
                this.ball.simpleMovement.accelX = 0;
                this.ball.simpleMovement.velY = 0;
                this.ball.simpleMovement.accelY = 0;
                this.currentState = this.states.IDLE;
                this.sensorTouched();
                this.createNewBall();
                return
            }
            if (this.ball.sprite.x > MLE.width + getConst(80) || this.ball.sprite.y < getConst(-80)) {
                this.noSuccessDetected();
                this.currentState = this.states.IDLE;
                return
            }
        }
        if ((this.currentState === this.states.IN_AIR || this.currentState === this.states.FROM_WALL) && this.ball.simpleMovement.velY > 0 && this.ball.sprite.y > this.ground) this.ball.sprite.x > 800 || this.ball.sprite.y < getConst(-160) ? (this.noSuccessDetected(), this.currentState = this.states.IDLE) : (this.ball.rotateSlow(), this.currentState === this.states.FROM_WALL ?
            (this.ball.simpleMovement.velX *= getConst(200) / this.ball.simpleMovement.velY, this.ball.simpleMovement.velY = getConst(-200)) : (this.ball.simpleMovement.velX *= getConst(400) / this.ball.simpleMovement.velY, this.ball.simpleMovement.velY = getConst(-300)), this.ball.simpleMovement.accelX = 0, this.ball.simpleMovement.accelY = getConst(800), this.currentState = this.states.FROM_GROUND, this.hideShowFrontMonsters(false), this.ball.sprite.y = this.ground);
        else if (this.currentState == this.states.FROM_GROUND && this.ball.simpleMovement.velY >
            0 && this.ball.sprite.y > this.ground) this.ball.rotateStop(), this.ball.simpleMovement.setValues(0, 0, 0, 0), this.currentState = this.states.IDLE, this.noSuccessDetected(true), this.ball.sprite.y = this.ground
    }
};
GameScene.prototype.draw = function () {
    MLE.context.imageSmoothingEnabled = true;
    this.bg.draw();
    this.fanAnim.draw();
    this.monster.draw();
    this.aimArrow.draw();
    this.shadow.draw();
    this.ball.draw();
    this.monsterFront.x = this.monster.group.x;
    this.monsterFront.y = this.monster.group.y - this.monster.group.pivotY;
    this.monsterFront.draw();
    this.gui.draw();
    this.windCloud.draw();
    this.pauseButton.draw();
    this.pauseWindow.draw()
};
GameScene.prototype.startGame = function () {};
GameScene.prototype.makeShadowTween = function () {
    var a = this.ball.startPosY + getConst(35),
        b = this.ground + getConst(15);
    this.shadow.scaleX = this.shadow.scaleY = 0.6;
    this.shadow.y = a;
    createjs.Tween.get(this.shadow).to({
        y: b,
        alpha: 0.7,
        scaleX: 0.3,
        scaleY: 0.3
    }, 2E3, createjs.Ease.quadOut)
};
GameScene.prototype.hideShowFrontMonsters = function (a) {
    this.monsterFront.alpha = a ? 1 : 0
};
GameScene.prototype.noSuccessDetected = function () {
    this.monster.makeHungryAnimation();
    this.hideShowFrontMonsters(false);
    this.gui.zeroPoints();
    createjs.Tween.get(this.ball.sprite).to({
        alpha: 0
    }, 150).call(this.createNewBall, null, this);
    createjs.Tween.get(this.shadow, {
        override: true
    }).to({
        alpha: 0
    }, 120);
    this.aimArrow.sprite.alpha > 0 && createjs.Tween.get(this.aimArrow.sprite).to({
        alpha: 0
    }, 120)
};
GameScene.prototype.createNewBall = function () {
    this.ball.simpleMovement.setValues(0, 0, 0, 0);
    this.ball.rotateStop();
    this.ball.sprite.x = this.ball.startPosX;
    this.ball.sprite.y = this.ball.startPosY + getConst(140);
    this.ball.sprite.scaleX = this.ball.sprite.scaleY = 1;
    this.ball.sprite.alpha = 0.5;
    createjs.Tween.get(this.ball.sprite).wait(250).to({
        y: this.ball.startPosY,
        alpha: 1
    }, 350, createjs.Ease.sineOut);
    this.aimArrow.resumeRotationTween();
    this.shadow.x = this.ball.startPosX;
    this.shadow.y = this.ball.startPosY + getConst(170);
    this.shadow.centerPivot();
    this.shadow.scaleX = this.shadow.scaleY = 0.6;
    this.shadow.alpha = 0.5;
    createjs.Tween.get(this.shadow).wait(250).to({
        y: this.ball.startPosY + getConst(30),
        alpha: 1
    }, 350, createjs.Ease.sineOut)
};
GameScene.prototype.sensorTouched = function () {
    if (this.isEasyLevel && (this.easyLevelCounter += 1, this.easyLevelCounter >= 3 && (this.easyLevel += 1, this.easyLevelCounter = 0, this.easyLevel === 6))) this.isEasyLevel = false;
    createjs.Tween.get(this.shadow, {
        override: true
    }).to({
        alpha: 0
    }, 150);
    this.ball.sprite.alpha = 0;
    this.hideShowFrontMonsters(false);
    this.gui.addPoints(Math.abs(Math.floor(this.windCloud.windNumber + 1)));
    this.generateNewWind();
    this.createNewBall()
};
GameScene.prototype.generateNewWind = function () {
    var a = Math.random() + Math.random(),
        b = getConst(1E3),
        a = a * b - b;
    if (this.isEasyLevel) {
        var b = (this.easyLevel + 1) * 1E3 / 6,
            a = this.easyLevel * 1E3 / 6,
            c = Math.floor(Math.round(Math.random()) * 2) - 1;
        a += Math.random() * (b - a);
        a *= c
    }
    this.windCloud.changeWind(MLE.Util.mapValue(a, -getConst(1E3), getConst(1E3), -6, 6));
    this.windPower = a * MLE.Util.mapValue(Math.abs(a), 0, b, 0.9, 0.7)
};
GameScene.prototype.pauseClicked = function () {
    this.paused = true;
    this.aimArrow.setPaused(true);
    this.windCloud.setPaused(true);
    this.pauseWindow.show();
    createjs.Tween.get(this.pauseButton.group).to({
        alpha: 0
    }, 350)
};
GameScene.prototype.resume = function () {
    this.aimArrow.setPaused(false);
    this.windCloud.setPaused(false);
    createjs.Tween.get(this.pauseButton.group).to({
        alpha: 1
    }, 350).wait(500).call(function () {
        this.paused = false
    }.bind(this))
};
var GameScene2 = function () {
    window.gameScene = this;
    this.states = {
        IDLE: 0,
        AIMING: 1,
        BEFORE_WIND: 2,
        IN_AIR_UP: 3,
        IN_AIR: 4,
        FROM_WALL: 5,
        FROM_GROUND: 6
    };
    this.currentState = this.states.IDLE;
    this.ground = -1;
    this.maxHeight = getConst(50);
    var a = Math.floor(Math.random() * 59) / 10;
    this.windPower = getConst(1E3) * a / 6;
    this.minScale = 0.35;
    this.init();
    this.gui.bestNumber < 20 && (a = Math.floor(Math.random() * 8) / 10 + 0.1);
    this.windCloud.windFont.text = a + "";
    this.windCloud.windNumber = a;
    this.windPower = getConst(1E3) * a / 6
};
GameScene2.prototype.init = function () {
    this.bg = new MLE.Sprite("gameBackground2", 0, 0);
    this.windCloud = new WindCloud;
    this.windCloud.group.x = 0;
    this.windCloud.group.y = getConst(520);
    this.aimArrow = new AimArrow;
    this.aimArrow.sprite.alpha = 0;
    this.ball = new Ball2;
    this.fanAnim = new FanAnim2;
    this.pauseButton = new MenuButton("pause");
    this.pauseButton.group.x = MLE.width - 50;
    this.pauseButton.group.y = MLE.height - 50;
    this.pauseButton.clickCallback = this.pauseClicked.bind(this);
    this.monsterFront = new MLE.Sprite("goal2Front", 0,
        0);
    this.monsterFront.centerPivot();
    this.monster = new Monster2;
    this.monster.setPositionXY(MLE.width / 2 + 5, MLE.height / 2 + getConst(265));
    this.shadow = new MLE.Sprite("shadow", this.ball.startPosX, this.ball.startPosY + getConst(30));
    this.shadow.centerPivot();
    this.shadow.scaleX = this.shadow.scaleY = 0.6;
    this.gui = new GUI(2);
    this.hideShowFrontMonsters(false);
    this.gui.alpha = 1;
    this.aimArrow.rotationTween.setPosition(1350);
    this.isEasyLevel = false;
    this.easyLevelCounter = this.easyLevel = 0;
    if (this.gui.bestNumber < 20) this.isEasyLevel =
        true;
    this.createNewBall();
    this.pauseWindow = new PauseWindow;
    this.paused = false
};
GameScene2.prototype.update = function () {
    this.pauseWindow.update();
    this.fanAnim.update();
    if (!this.paused) {
        this.windCloud.update();
        this.monster.update();
        this.gui.update();
        this.ball.update();
        this.pauseButton.update();
        var a = !this.pauseButton.isDown() && MLE.mouse.pressed && this.ball.sprite.x === this.ball.startPosX && this.ball.sprite.y === this.ball.startPosY && this.aimArrow.sprite.alpha >= 0.75;
        this.shadow.x = this.ball.sprite.x;
        this.aimArrow.update();
        if (a && this.currentState === this.states.IDLE) this.currentState = this.states.AIMING;
        else if (a && this.currentState === this.states.AIMING) this.ball.makeShoot(this.aimArrow.shotDirectionX, this.aimArrow.shotDirectionY, this.aimArrow.shootAngle), this.makeShadowTween(), this.ball.rotateFast(), this.currentState = this.states.BEFORE_WIND, this.aimArrow.stopRotationTween();
        else if (this.currentState === this.states.IN_AIR_UP && this.ball.simpleMovement.velY > 0) this.currentState = this.states.IN_AIR, this.hideShowFrontMonsters(true);
        else if (this.currentState === this.states.IN_AIR || this.currentState === this.states.FROM_WALL ||
            this.currentState === this.states.FROM_GROUND) {
            for (var a = this.monster.circleCollisions, b = this.ball.circleCollision, c = true, e = 0; e < a.length && c; e++)
                if (a[e].checkAgainstWithPosCorrection(b, this.ball.befX, this.ball.befY) !== null && this.currentState !== this.states.FROM_WALL) c = false, e < 2 && this.ball.sprite.y < a[e].y + a[e].sprite.y - getConst(12) ? (this.ball.simpleMovement.velX = e === 1 ? getConst(50) : getConst(-50), this.ball.simpleMovement.accelX = 0, this.ball.simpleMovement.velY = getConst(-300), this.ball.simpleMovement.accelY =
                    getConst(800)) : (this.ball.simpleMovement.velX = this.ball.sprite.x > a[e].x + a[e].sprite.x ? getConst(130) : getConst(-130), this.ball.simpleMovement.accelX = 0), this.currentState = this.states.FROM_WALL, this.ball.rotateSlow();
            if (this.monster.pointDetector.checkAgainstWithShift(this.ball.circleCollision, this.ball.befX, this.ball.befY) !== null) {
                this.ball.simpleMovement.velX = 0;
                this.ball.simpleMovement.accelX = 0;
                this.ball.simpleMovement.velY = 0;
                this.ball.simpleMovement.accelY = 0;
                this.currentState = this.states.IDLE;
                this.sensorTouched();
                this.createNewBall();
                return
            }
            if (this.ball.sprite.x > MLE.width + getConst(80) || this.ball.sprite.y < getConst(-80)) {
                this.noSuccessDetected();
                this.currentState = this.states.IDLE;
                return
            }
        }
        if ((this.currentState === this.states.IN_AIR || this.currentState === this.states.FROM_WALL) && this.ball.simpleMovement.velY > 0 && this.ball.sprite.y > this.ground) this.ball.sprite.x > 800 || this.ball.sprite.x < getConst(-160) ? (this.noSuccessDetected(), this.currentState = this.states.IDLE) : (this.ball.rotateSlow(), this.currentState === this.states.FROM_WALL ?
            (this.ball.simpleMovement.velX *= getConst(200) / this.ball.simpleMovement.velY, this.ball.simpleMovement.velY = getConst(-200)) : (this.ball.simpleMovement.velX *= getConst(400) / this.ball.simpleMovement.velY, this.ball.simpleMovement.velY = getConst(-300)), this.ball.simpleMovement.accelX = 0, this.ball.simpleMovement.accelY = getConst(800), this.currentState = this.states.FROM_GROUND, this.ball.sprite.y = this.ground);
        else if (this.currentState == this.states.FROM_GROUND && this.ball.simpleMovement.velY > 0 && this.ball.sprite.y >
            this.ground) this.ball.rotateStop(), this.ball.simpleMovement.setValues(0, 0, 0, 0), this.currentState = this.states.IDLE, this.noSuccessDetected(true), this.ball.sprite.y = this.ground
    }
};
GameScene2.prototype.draw = function () {
    MLE.context.imageSmoothingEnabled = true;
    this.bg.draw();
    this.monsterFront.alpha === 0 && this.fanAnim.draw();
    this.monster.draw();
    this.aimArrow.draw();
    this.shadow.draw();
    this.ball.draw();
    this.monsterFront.x = this.monster.group.x;
    this.monsterFront.y = this.monster.group.y - this.monster.group.pivotY;
    this.monsterFront.draw();
    this.monsterFront.alpha === 1 && this.fanAnim.draw();
    this.gui.draw();
    this.windCloud.draw();
    this.pauseButton.draw();
    this.pauseWindow.draw()
};
GameScene2.prototype.startGame = function () {};
GameScene2.prototype.makeShadowTween = function () {
    var a = this.ball.startPosY + getConst(35),
        b = this.ground + getConst(15);
    this.shadow.scaleX = this.shadow.scaleY = 0.6;
    this.shadow.y = a;
    createjs.Tween.get(this.shadow).to({
        y: b,
        alpha: 0.7,
        scaleX: 0.3,
        scaleY: 0.3
    }, 1800, createjs.Ease.quadOut)
};
GameScene2.prototype.hideShowFrontMonsters = function (a) {
    this.monsterFront.alpha = a ? 1 : 0
};
GameScene2.prototype.noSuccessDetected = function () {
    this.monster.makeHungryAnimation();
    this.gui.zeroPoints();
    createjs.Tween.get(this.ball.sprite).to({
        alpha: 0
    }, 150).call(this.createNewBall, null, this);
    createjs.Tween.get(this.shadow, {
        override: true
    }).to({
        alpha: 0
    }, 120);
    this.aimArrow.sprite.alpha > 0 && createjs.Tween.get(this.aimArrow.sprite).to({
        alpha: 0
    }, 120)
};
GameScene2.prototype.createNewBall = function () {
    this.ball.simpleMovement.setValues(0, 0, 0, 0);
    this.ball.rotateStop();
    this.ball.sprite.x = this.ball.startPosX;
    this.ball.sprite.y = this.ball.startPosY + getConst(140);
    this.ball.sprite.scaleX = this.ball.sprite.scaleY = 1;
    this.ball.sprite.alpha = 0.5;
    createjs.Tween.get(this.ball.sprite).wait(250).to({
        y: this.ball.startPosY,
        alpha: 1
    }, 350, createjs.Ease.sineOut);
    this.aimArrow.resumeRotationTween();
    this.hideShowFrontMonsters(false);
    this.shadow.x = this.ball.startPosX;
    this.shadow.y =
        this.ball.startPosY + getConst(170);
    this.shadow.centerPivot();
    this.shadow.scaleX = this.shadow.scaleY = 0.6;
    this.shadow.alpha = 0.5;
    createjs.Tween.get(this.shadow).wait(250).to({
        y: this.ball.startPosY + getConst(30),
        alpha: 1
    }, 350, createjs.Ease.sineOut)
};
GameScene2.prototype.sensorTouched = function () {
    if (this.isEasyLevel && (this.easyLevelCounter += 1, this.easyLevelCounter >= 3 && (this.easyLevel += 1, this.easyLevelCounter = 0, this.easyLevel === 6))) this.isEasyLevel = false;
    createjs.Tween.get(this.shadow, {
        override: true
    }).to({
        alpha: 0
    }, 150);
    this.ball.sprite.alpha = 0;
    this.hideShowFrontMonsters(false);
    this.gui.addPoints(Math.abs(Math.floor(this.windCloud.windNumber + 1)));
    this.generateNewWind();
    this.createNewBall()
};
GameScene2.prototype.generateNewWind = function () {
    var a = Math.random() + Math.random(),
        b = getConst(1E3),
        a = a * b - b;
    if (this.isEasyLevel) {
        var b = (this.easyLevel + 1) * 1E3 / 6,
            a = this.easyLevel * 1E3 / 6,
            c = Math.floor(Math.round(Math.random()) * 2) - 1;
        a += Math.random() * (b - a);
        a *= c
    }
    this.windCloud.changeWind(MLE.Util.mapValue(a, -getConst(1E3), getConst(1E3), -6, 6));
    this.windPower = a * MLE.Util.mapValue(Math.abs(a), 0, b, 0.9, 0.7)
};
GameScene2.prototype.pauseClicked = function () {
    this.paused = true;
    this.aimArrow.setPaused(true);
    this.windCloud.setPaused(true);
    this.pauseWindow.show();
    createjs.Tween.get(this.pauseButton.group).to({
        alpha: 0
    }, 350)
};
GameScene2.prototype.resume = function () {
    this.aimArrow.setPaused(false);
    this.windCloud.setPaused(false);
    createjs.Tween.get(this.pauseButton.group).to({
        alpha: 1
    }, 350).wait(500).call(function () {
        this.paused = false
    }.bind(this))
};
var GameScene3 = function () {
    window.gameScene = this;
    this.states = {
        IDLE: 0,
        AIMING: 1,
        BEFORE_WIND: 2,
        IN_AIR_UP: 3,
        IN_AIR: 4,
        FROM_WALL: 5,
        FROM_GROUND: 6
    };
    this.currentState = this.states.IDLE;
    this.ground = -1;
    this.maxHeight = getConst(50);
    var a = Math.floor(Math.random() * 59) / 10;
    this.windPower = getConst(1E3) * a / 6;
    this.minScale = 0.35;
    this.init();
    this.gui.bestNumber < 20 && (a = Math.floor(Math.random() * 8) / 10 + 0.1);
    this.windCloud.windFont.text = a + "";
    this.windCloud.windNumber = a;
    this.windPower = getConst(1E3) * a / 6
};
GameScene3.prototype.init = function () {
    this.bg = new MLE.Sprite("gameBackground3", 0, 0);
    this.front3 = new MLE.Sprite("front3", 0, 0);
    this.windCloud = new WindCloud;
    this.windCloud.group.x = 0;
    this.windCloud.group.y = getConst(520);
    this.aimArrow = new AimArrow;
    this.aimArrow.sprite.alpha = 0;
    this.ball = new Ball3;
    this.fanAnim = new FanAnim3;
    this.pauseButton = new MenuButton("pause");
    this.pauseButton.group.x = MLE.width - 50;
    this.pauseButton.group.y = MLE.height - 50;
    this.pauseButton.clickCallback = this.pauseClicked.bind(this);
    this.monsterFront =
        new MLE.Sprite("goal3Front", 0, 0);
    this.monsterFront.centerPivot();
    this.monster = new Monster3;
    this.monster.setPositionXY(MLE.width / 2 - 10, MLE.height / 2 + getConst(115));
    this.shadow = new MLE.Sprite("shadow", this.ball.startPosX, this.ball.startPosY + getConst(30));
    this.shadow.centerPivot();
    this.shadow.scaleX = this.shadow.scaleY = 0.6;
    this.gui = new GUI(3);
    this.monster.setScaleX(1.2);
    this.hideShowFrontMonsters(false);
    this.gui.alpha = 1;
    this.aimArrow.rotationTween.setPosition(1350);
    this.isEasyLevel = false;
    this.easyLevelCounter =
        this.easyLevel = 0;
    if (this.gui.bestNumber < 20) this.isEasyLevel = true;
    this.createNewBall();
    this.pauseWindow = new PauseWindow;
    this.paused = false;
    this.realGround = this.ground;
    this.downGround = false
};
GameScene3.prototype.update = function () {
    this.pauseWindow.update();
    this.fanAnim.update();
    if (!this.paused) {
        this.windCloud.update();
        this.monster.update();
        this.gui.update();
        this.ball.update();
        this.pauseButton.update();
        var a = !this.pauseButton.isDown() && MLE.mouse.pressed && this.ball.sprite.x === this.ball.startPosX && this.ball.sprite.y === this.ball.startPosY && this.aimArrow.sprite.alpha >= 0.75;
        this.shadow.x = this.ball.sprite.x;
        this.aimArrow.update();
        if (this.downGround === false && this.currentState >= this.states.IN_AIR &&
            (this.ball.sprite.x < 152 || this.ball.sprite.x > 408) && this.ball.sprite.y >= this.realGround) this.ground = this.realGround + 120, this.downGround = true;
        if (a && this.currentState === this.states.IDLE) this.currentState = this.states.AIMING;
        else if (a && this.currentState === this.states.AIMING) this.ball.makeShoot(this.aimArrow.shotDirectionX, this.aimArrow.shotDirectionY, this.aimArrow.shootAngle), this.makeShadowTween(), this.ball.rotateFast(), this.currentState = this.states.BEFORE_WIND, this.aimArrow.stopRotationTween();
        else if (this.currentState ===
            this.states.IN_AIR_UP && this.ball.simpleMovement.velY > 0) this.currentState = this.states.IN_AIR, this.hideShowFrontMonsters(true);
        else if (this.currentState === this.states.IN_AIR || this.currentState === this.states.FROM_WALL || this.currentState === this.states.FROM_GROUND) {
            for (var a = this.monster.circleCollisions, b = this.ball.circleCollision, c = true, e = 0; e < a.length && c; e++)
                if (a[e].checkAgainstWithPosCorrection(b, this.ball.befX, this.ball.befY) !== null && this.currentState !== this.states.FROM_WALL) c = false, e < 2 && this.ball.sprite.y <
                    a[e].y + a[e].sprite.y - getConst(12) ? (this.ball.simpleMovement.velX = e === 1 ? getConst(50) : getConst(-50), this.ball.simpleMovement.accelX = 0, this.ball.simpleMovement.velY = getConst(-300), this.ball.simpleMovement.accelY = getConst(800)) : (this.ball.simpleMovement.velX = this.ball.sprite.x > a[e].x + a[e].sprite.x ? getConst(130) : getConst(-130), this.ball.simpleMovement.accelX = 0), this.currentState = this.states.FROM_WALL, this.ball.rotateSlow();
            if (this.monster.pointDetector.checkAgainstWithShift(this.ball.circleCollision, this.ball.befX,
                this.ball.befY) !== null) {
                this.ball.simpleMovement.velX = 0;
                this.ball.simpleMovement.accelX = 0;
                this.ball.simpleMovement.velY = 0;
                this.ball.simpleMovement.accelY = 0;
                this.currentState = this.states.IDLE;
                this.sensorTouched();
                this.createNewBall();
                return
            }
            if (this.ball.sprite.x > MLE.width + getConst(80) || this.ball.sprite.y < getConst(-80)) {
                this.noSuccessDetected();
                this.currentState = this.states.IDLE;
                return
            }
        }
        if ((this.currentState === this.states.IN_AIR || this.currentState === this.states.FROM_WALL) && this.ball.simpleMovement.velY >
            0 && this.ball.sprite.y > this.ground) this.ball.sprite.x > 800 || this.ball.sprite.y < getConst(-160) ? (this.noSuccessDetected(), this.currentState = this.states.IDLE) : (this.ball.rotateSlow(), this.currentState === this.states.FROM_WALL ? (this.ball.simpleMovement.velX *= getConst(200) / this.ball.simpleMovement.velY, this.ball.simpleMovement.velY = getConst(-200)) : (this.ball.simpleMovement.velX *= getConst(400) / this.ball.simpleMovement.velY, this.ball.simpleMovement.velY = getConst(-300)), this.ball.simpleMovement.accelX = 0, this.ball.simpleMovement.accelY =
            getConst(800), this.currentState = this.states.FROM_GROUND, this.hideShowFrontMonsters(false), this.ball.sprite.y = this.ground);
        else if (this.currentState == this.states.FROM_GROUND && this.ball.simpleMovement.velY > 0 && this.ball.sprite.y > this.ground) this.ball.rotateStop(), this.ball.simpleMovement.setValues(0, 0, 0, 0), this.currentState = this.states.IDLE, this.noSuccessDetected(true), this.ball.sprite.y = this.ground
    }
};
GameScene3.prototype.draw = function () {
    MLE.context.imageSmoothingEnabled = true;
    this.bg.draw();
    this.fanAnim.draw();
    this.monster.draw();
    this.aimArrow.draw();
    this.downGround || this.shadow.draw();
    this.ball.draw();
    this.downGround && (this.front3.draw(), this.monster.draw());
    this.monsterFront.x = this.monster.group.x;
    this.monsterFront.y = this.monster.group.y - this.monster.group.pivotY;
    this.monsterFront.draw();
    this.gui.draw();
    this.windCloud.draw();
    this.pauseButton.draw();
    this.pauseWindow.draw()
};
GameScene3.prototype.startGame = function () {};
GameScene3.prototype.makeShadowTween = function () {
    var a = this.ball.startPosY + getConst(35),
        b = this.realGround + getConst(15);
    this.shadow.scaleX = this.shadow.scaleY = 0.6;
    this.shadow.y = a;
    createjs.Tween.get(this.shadow).to({
        y: b,
        alpha: 0.7,
        scaleX: 0.3,
        scaleY: 0.3
    }, 2E3, createjs.Ease.quadOut)
};
GameScene3.prototype.hideShowFrontMonsters = function (a) {
    this.monsterFront.alpha = a ? 1 : 0
};
GameScene3.prototype.noSuccessDetected = function () {
    this.monster.makeHungryAnimation();
    this.hideShowFrontMonsters(false);
    this.gui.zeroPoints();
    createjs.Tween.get(this.ball.sprite).to({
        alpha: 0
    }, 150).call(this.createNewBall, null, this);
    createjs.Tween.get(this.shadow, {
        override: true
    }).to({
        alpha: 0
    }, 120);
    this.aimArrow.sprite.alpha > 0 && createjs.Tween.get(this.aimArrow.sprite).to({
        alpha: 0
    }, 120)
};
GameScene3.prototype.createNewBall = function () {
    if (this.downGround) this.ground = this.realGround, this.downGround = false;
    this.ball.simpleMovement.setValues(0, 0, 0, 0);
    this.ball.rotateStop();
    this.ball.sprite.x = this.ball.startPosX;
    this.ball.sprite.y = this.ball.startPosY + getConst(140);
    this.ball.sprite.scaleX = this.ball.sprite.scaleY = 1;
    this.ball.sprite.alpha = 0.5;
    createjs.Tween.get(this.ball.sprite).wait(250).to({
        y: this.ball.startPosY,
        alpha: 1
    }, 350, createjs.Ease.sineOut);
    this.aimArrow.resumeRotationTween();
    this.shadow.x =
        this.ball.startPosX;
    this.shadow.y = this.ball.startPosY + getConst(170);
    this.shadow.centerPivot();
    this.shadow.scaleX = this.shadow.scaleY = 0.6;
    this.shadow.alpha = 0.5;
    createjs.Tween.get(this.shadow).wait(250).to({
        y: this.ball.startPosY + getConst(30),
        alpha: 1
    }, 350, createjs.Ease.sineOut)
};
GameScene3.prototype.sensorTouched = function () {
    if (this.isEasyLevel && (this.easyLevelCounter += 1, this.easyLevelCounter >= 3 && (this.easyLevel += 1, this.easyLevelCounter = 0, this.easyLevel === 6))) this.isEasyLevel = false;
    createjs.Tween.get(this.shadow, {
        override: true
    }).to({
        alpha: 0
    }, 150);
    this.ball.sprite.alpha = 0;
    this.hideShowFrontMonsters(false);
    this.gui.addPoints(Math.abs(Math.floor(this.windCloud.windNumber + 1)));
    this.generateNewWind();
    this.createNewBall()
};
GameScene3.prototype.generateNewWind = function () {
    var a = Math.random() + Math.random(),
        b = getConst(1E3),
        a = a * b - b;
    if (this.isEasyLevel) {
        var b = (this.easyLevel + 1) * 1E3 / 6,
            a = this.easyLevel * 1E3 / 6,
            c = Math.floor(Math.round(Math.random()) * 2) - 1;
        a += Math.random() * (b - a);
        a *= c
    }
    this.windCloud.changeWind(MLE.Util.mapValue(a, -getConst(1E3), getConst(1E3), -6, 6));
    this.windPower = a * MLE.Util.mapValue(Math.abs(a), 0, b, 0.9, 0.7)
};
GameScene3.prototype.pauseClicked = function () {
    this.paused = true;
    this.aimArrow.setPaused(true);
    this.windCloud.setPaused(true);
    this.pauseWindow.show();
    createjs.Tween.get(this.pauseButton.group).to({
        alpha: 0
    }, 350)
};
GameScene3.prototype.resume = function () {
    this.aimArrow.setPaused(false);
    this.windCloud.setPaused(false);
    createjs.Tween.get(this.pauseButton.group).to({
        alpha: 1
    }, 350).wait(500).call(function () {
        this.paused = false
    }.bind(this))
};
var WindCloud = function () {
    this.init()
};
WindCloud.prototype.init = function () {
    this.group = new MLE.Group;
    this.windCloud = new MLE.Sprite("wind", 45, 0);
    this.windCloud.centerPivot();
    this.group.addChild(this.windCloud);
    this.windFont = new MLE.TextSprite;
    this.windFont.text = "2.5";
    this.windFont.size = 27;
    this.windFont.x += getConst(35);
    this.numberPin = new MLE.Pin(this.windFont, this.group, getConst(40), 95);
    this.windNumber = 2.5;
    this.tween = {}
};
WindCloud.prototype.update = function () {
    this.windNumber = Math.round(this.windNumber * 10) / 10;
    this.windFont.text = "" + this.windNumber;
    this.windNumber % 1 === 0 && (this.windFont.text += ".0");
    this.numberPin.update()
};
WindCloud.prototype.draw = function () {
    this.group.draw();
    this.windFont.draw()
};
WindCloud.prototype.changeWind = function (a) {
    a = Math.round(a * 10) / 10;
    a === 0 && (a = 0.1);
    if (this.group.scaleX / a > 0) this.tween = createjs.Tween.get(this).to({
        windNumber: Math.abs(a)
    }, 750, createjs.Ease.sineInOut);
    else {
        var b = this.group.scaleX,
            c;
        c = b === 1 ? [getConst(-100), MLE.width + getConst(100), MLE.width] : [MLE.width + getConst(100), getConst(-100), 0];
        this.tween = createjs.Tween.get(this.group).to({
            x: c[0]
        }, 400).to({
            x: c[1],
            scaleX: b * -1
        }).call(function () {
            this.windNumber = Math.abs(a);
            this.numberPin.offsetX = getConst(35) * b * -1
        }.bind(this)).to({
                x: c[2]
            },
            400, createjs.Ease.sineInOut)
    }
};
WindCloud.prototype.setPaused = function (a) {
    this.tween._paused = a
};
var Monster = function () {
    this.init()
};
Monster.prototype.init = function () {
    this.group = new MLE.Group;
    this.shadow = new MLE.Sprite("shadow", -1, -1);
    this.shadow.centerPivot();
    this.shadow.alpha = 0;
    this.body = new MLE.Sprite("goal", 0, 0);
    this.body.centerPivot();
    this.group.addChild(this.body);
    this.group.pivotY = getConst(224);
    this.baseY = this.baseX = 0;
    this.circleCollisions = [];
    for (var a = [{
        x: 40,
        y: -165,
        r: 4
    }, {
        x: -40,
        y: -165,
        r: 4
    }, {
        x: 36,
        y: -150,
        r: 4
    }, {
        x: -36,
        y: -150,
        r: 4
    }, {
        x: 33,
        y: -135,
        r: 4
    }, {
        x: -33,
        y: -135,
        r: 4
    }, {
        x: 29,
        y: -120,
        r: 4
    }, {
        x: -29,
        y: -120,
        r: 4
    }, {
        x: 27,
        y: -105,
        r: 4
    }, {
        x: -27,
        y: -105,
        r: 4
    }, {
        x: 25,
        y: -90,
        r: 4
    }, {
        x: -25,
        y: -90,
        r: 4
    }, {
        x: 23,
        y: -75,
        r: 4
    }, {
        x: -23,
        y: -75,
        r: 4
    }], b = 0; b < a.length; b++) {
        var c = a[b],
            c = new MLE.CircleCollision(this.shadow, getConst(c.x), getConst(c.y), getConst(c.r));
        this.circleCollisions.push(c);
        c.realX = c.x
    }
    this.pointDetector = new MLE.CircleCollision(this.shadow, 0, getConst(-94), getConst(30))
};
Monster.prototype.update = function () {};
Monster.prototype.draw = function () {
    this.shadow.draw();
    this.group.draw();
    for (var a = 0; a < this.circleCollisions.length; a++) this.circleCollisions[a].drawDebug();
    this.pointDetector.drawDebug()
};
Monster.prototype.setPositionXY = function (a, b) {
    this.baseX = a;
    this.baseY = b;
    this.shadow.x = a;
    this.shadow.y = b - getConst(98);
    window.gameScene.ground = this.shadow.y - getConst(95);
    this.group.x = a;
    this.group.y = b
};
Monster.prototype.setScaleX = function (a) {
    this.group.scaleX = a;
    this.shadow.scaleX = this.shadow.scaleY = a;
    window.gameScene.monsterFront.scaleX = a;
    for (var b = 0; b < this.circleCollisions.length; b++) this.circleCollisions[b].x = this.circleCollisions[b].realX * a
};
Monster.prototype.makeHappyJump = function () {};
Monster.prototype.makeHungryAnimation = function () {};
var Monster2 = function () {
    this.init()
};
Monster2.prototype.init = function () {
    this.group = new MLE.Group;
    this.shadow = new MLE.Sprite("shadow", -1, -1);
    this.shadow.centerPivot();
    this.shadow.alpha = 0;
    this.body = new MLE.Sprite("goal2", 0, 0);
    this.body.centerPivot();
    this.group.addChild(this.body);
    this.group.pivotY = getConst(224);
    this.baseY = this.baseX = 0;
    this.circleCollisions = [];
    for (var a = [{
        x: 55,
        y: -165,
        r: 4
    }, {
        x: -50,
        y: -165,
        r: 4
    }, {
        x: 55,
        y: -150,
        r: 4
    }, {
        x: -50,
        y: -150,
        r: 4
    }, {
        x: 55,
        y: -135,
        r: 4
    }, {
        x: -50,
        y: -135,
        r: 4
    }, {
        x: 55,
        y: -120,
        r: 4
    }, {
        x: -50,
        y: -120,
        r: 4
    }, {
        x: 55,
        y: -105,
        r: 4
    }, {
        x: -50,
        y: -105,
        r: 4
    }, {
        x: 55,
        y: -90,
        r: 4
    }, {
        x: -50,
        y: -90,
        r: 4
    }, {
        x: 55,
        y: -75,
        r: 4
    }, {
        x: -50,
        y: -75,
        r: 4
    }], b = 0; b < a.length; b++) {
        var c = a[b],
            c = new MLE.CircleCollision(this.shadow, getConst(c.x), getConst(c.y), getConst(c.r));
        this.circleCollisions.push(c);
        c.realX = c.x
    }
    this.pointDetector = new MLE.CircleCollision(this.shadow, 2, getConst(-90), getConst(43))
};
Monster2.prototype.update = function () {};
Monster2.prototype.draw = function () {
    this.shadow.draw();
    this.group.draw();
    for (var a = 0; a < this.circleCollisions.length; a++) this.circleCollisions[a].drawDebug();
    this.pointDetector.drawDebug()
};
Monster2.prototype.setPositionXY = function (a, b) {
    this.baseX = a;
    this.baseY = b;
    this.shadow.x = a;
    this.shadow.y = b - getConst(98);
    window.gameScene.ground = this.shadow.y - getConst(90);
    this.group.x = a;
    this.group.y = b
};
Monster2.prototype.setScaleX = function (a) {
    this.group.scaleX = a;
    this.shadow.scaleX = this.shadow.scaleY = a;
    window.gameScene.monsterFront.scaleX = a;
    for (var b = 0; b < this.circleCollisions.length; b++) this.circleCollisions[b].x = this.circleCollisions[b].realX * a
};
Monster2.prototype.makeHappyJump = function () {};
Monster2.prototype.makeHungryAnimation = function () {};
var Monster3 = function () {
    this.init()
};
Monster3.prototype.init = function () {
    this.group = new MLE.Group;
    this.shadow = new MLE.Sprite("shadow", -1, -1);
    this.shadow.centerPivot();
    this.shadow.alpha = 0;
    this.body = new MLE.Sprite("goal3", 0, 0);
    this.body.centerPivot();
    this.group.addChild(this.body);
    this.group.pivotY = getConst(224);
    this.baseY = this.baseX = 0;
    this.circleCollisions = [];
    for (var a = [{
        x: 32,
        y: -150,
        r: 4
    }, {
        x: -32,
        y: -150,
        r: 4
    }, {
        x: 30,
        y: -135,
        r: 4
    }, {
        x: -30,
        y: -135,
        r: 4
    }, {
        x: 29,
        y: -120,
        r: 4
    }, {
        x: -29,
        y: -120,
        r: 4
    }, {
        x: 27,
        y: -105,
        r: 4
    }, {
        x: -27,
        y: -105,
        r: 4
    }, {
        x: 25,
        y: -90,
        r: 4
    }, {
        x: -25,
        y: -90,
        r: 4
    }], b = 0; b < a.length; b++) {
        var c = a[b],
            c = new MLE.CircleCollision(this.shadow, getConst(c.x), getConst(c.y), getConst(c.r));
        this.circleCollisions.push(c);
        c.realX = c.x
    }
    this.pointDetector = new MLE.CircleCollision(this.shadow, 0, getConst(-110), getConst(20))
};
Monster3.prototype.update = function () {};
Monster3.prototype.draw = function () {
    this.shadow.draw();
    this.group.draw();
    for (var a = 0; a < this.circleCollisions.length; a++) this.circleCollisions[a].drawDebug();
    this.pointDetector.drawDebug()
};
Monster3.prototype.setPositionXY = function (a, b) {
    this.baseX = a;
    this.baseY = b;
    this.shadow.x = a;
    this.shadow.y = b - getConst(98);
    window.gameScene.ground = this.shadow.y - getConst(100);
    this.group.x = a;
    this.group.y = b
};
Monster3.prototype.setScaleX = function (a) {
    this.group.scaleX = a;
    this.shadow.scaleX = this.shadow.scaleY = a;
    window.gameScene.monsterFront.scaleX = a;
    for (var b = 0; b < this.circleCollisions.length; b++) this.circleCollisions[b].x = this.circleCollisions[b].realX * a
};
Monster3.prototype.makeHappyJump = function () {};
Monster3.prototype.makeHungryAnimation = function () {};
var Ball = function () {
    this.init()
};
Ball.prototype.init = function () {
    this.startPosX = MLE.width / 2;
    this.startPosY = MLE.height - getConst(50);
    this.minScale = 0.48;
    this.sprite = new MLE.Sprite("paper", this.startPosX, this.startPosY);
    this.sprite.centerPivot();
    this.simpleMovement = new MLE.SimpleMovement(this.sprite);
    this.circleCollision = new MLE.CircleCollision(this.sprite, 0, 0, getConst(30));
    this.rotationSpeed = 0
};
Ball.prototype.update = function () {
    this.befX = this.sprite.x;
    this.befY = this.sprite.y;
    this.simpleMovement.update();
    this.sprite.angle += this.rotationSpeed * MLE.tick / 1E3;
    if (window.gameScene.currentState > window.gameScene.states.AIMING && window.gameScene.currentState < window.gameScene.states.FROM_WALL) {
        var a = this.sprite.y - this.simpleMovement.velY * this.simpleMovement.velY / this.simpleMovement.accelY / 2;
        if (window.gameScene.currentState === window.gameScene.states.IN_AIR_UP || window.gameScene.currentState === window.gameScene.states.BEFORE_WIND) a =
            (this.sprite.y - a) / (this.startPosY - a), this.sprite.scaleX = this.sprite.scaleY = a.map(0, 1, 1 - (1 - this.minScale) / 1.3, 1);
        else if (window.gameScene.currentState === window.gameScene.states.IN_AIR) a = (this.sprite.y - a) / (window.gameScene.ground - getConst(200) - a), this.sprite.scaleX = this.sprite.scaleY = a.map(0, 1, 1 - (1 - this.minScale) / 1.3, this.minScale);
        if (this.sprite.scaleX < this.minScale) this.sprite.scaleX = this.sprite.scaleY = this.minScale;
        this.circleCollision.r = getConst(30) * this.sprite.scaleX
    }
};
Ball.prototype.draw = function () {
    this.sprite.draw();
    this.circleCollision.drawDebug()
};
Ball.prototype.makeShoot = function (a, b, c) {
    createjs.Tween.get(this.sprite).to({
        x: this.sprite.x + 2 * a,
        y: this.sprite.y + 2 * b
    }, 200).call(function () {
        c = MLE.Util.toDeg(c);
        var e = getConst(-800),
            d = window.gameScene.windPower * 0.9,
            f = getConst(1100);
        this.simpleMovement.setValues(e / b * a, e, d, f);
        window.gameScene.currentState = window.gameScene.states.IN_AIR_UP
    }.bind(this))
};
Ball.prototype.rotateStop = function () {
    this.rotationSpeed = 0
};
Ball.prototype.rotateSlow = function () {
    this.rotationSpeed = 500
};
Ball.prototype.rotateFast = function () {
    this.rotationSpeed = 1500
};
var Ball2 = function () {
    this.init()
};
Ball2.prototype.init = function () {
    this.startPosX = MLE.width / 2;
    this.startPosY = MLE.height - getConst(50);
    this.minScale = 0.43;
    this.sprite = new MLE.Sprite("paper", this.startPosX, this.startPosY);
    this.sprite.centerPivot();
    this.simpleMovement = new MLE.SimpleMovement(this.sprite);
    this.circleCollision = new MLE.CircleCollision(this.sprite, 0, 0, getConst(30));
    this.rotationSpeed = 0
};
Ball2.prototype.update = function () {
    this.befX = this.sprite.x;
    this.befY = this.sprite.y;
    this.simpleMovement.update();
    this.sprite.angle += this.rotationSpeed * MLE.tick / 1E3;
    if (window.gameScene.currentState > window.gameScene.states.AIMING && window.gameScene.currentState < window.gameScene.states.FROM_WALL) {
        var a = this.sprite.y - this.simpleMovement.velY * this.simpleMovement.velY / this.simpleMovement.accelY / 2;
        if (window.gameScene.currentState === window.gameScene.states.IN_AIR_UP || window.gameScene.currentState === window.gameScene.states.BEFORE_WIND) a =
            (this.sprite.y - a) / (this.startPosY - a), this.sprite.scaleX = this.sprite.scaleY = a.map(0, 1, 1 - (1 - this.minScale) / 1.3, 1);
        else if (window.gameScene.currentState === window.gameScene.states.IN_AIR) a = (this.sprite.y - a) / (window.gameScene.ground - getConst(0) - a), this.sprite.scaleX = this.sprite.scaleY = a.map(0, 1, 1 - (1 - this.minScale) / 1.3, this.minScale);
        if (this.sprite.scaleX < this.minScale) this.sprite.scaleX = this.sprite.scaleY = this.minScale;
        this.circleCollision.r = getConst(30) * this.sprite.scaleX
    }
};
Ball2.prototype.draw = function () {
    this.sprite.draw();
    this.circleCollision.drawDebug()
};
Ball2.prototype.makeShoot = function (a, b, c) {
    createjs.Tween.get(this.sprite).to({
        x: this.sprite.x + 2 * a,
        y: this.sprite.y + 2 * b
    }, 200).call(function () {
        c = MLE.Util.toDeg(c);
        var e = getConst(-850),
            d = window.gameScene.windPower,
            f = getConst(1100);
        this.simpleMovement.setValues(e / b * a, e, d, f);
        window.gameScene.currentState = window.gameScene.states.IN_AIR_UP
    }.bind(this))
};
Ball2.prototype.rotateStop = function () {
    this.rotationSpeed = 0
};
Ball2.prototype.rotateSlow = function () {
    this.rotationSpeed = 500
};
Ball2.prototype.rotateFast = function () {
    this.rotationSpeed = 1500
};
Ball2.prototype.startFalling = function () {};
Ball2.prototype.startFalling = function () {};
var Ball3 = function () {
    this.init()
};
Ball3.prototype.init = function () {
    this.startPosX = MLE.width / 2;
    this.startPosY = MLE.height - getConst(50);
    this.minScale = 0.38;
    this.sprite = new MLE.Sprite("paper", this.startPosX, this.startPosY);
    this.sprite.centerPivot();
    this.simpleMovement = new MLE.SimpleMovement(this.sprite);
    this.circleCollision = new MLE.CircleCollision(this.sprite, 0, 0, getConst(30));
    this.rotationSpeed = 0
};
Ball3.prototype.update = function () {
    this.befX = this.sprite.x;
    this.befY = this.sprite.y;
    this.simpleMovement.update();
    this.sprite.angle += this.rotationSpeed * MLE.tick / 1E3;
    if (window.gameScene.currentState > window.gameScene.states.AIMING && window.gameScene.currentState < window.gameScene.states.FROM_WALL) {
        var a = this.sprite.y - this.simpleMovement.velY * this.simpleMovement.velY / this.simpleMovement.accelY / 2;
        if (window.gameScene.currentState === window.gameScene.states.IN_AIR_UP || window.gameScene.currentState === window.gameScene.states.BEFORE_WIND) a =
            (this.sprite.y - a) / (this.startPosY - a), this.sprite.scaleX = this.sprite.scaleY = a.map(0, 1, 1 - (1 - this.minScale) / 1.3, 1);
        else if (window.gameScene.currentState === window.gameScene.states.IN_AIR) a = (this.sprite.y - a) / (window.gameScene.realGround - getConst(0) - a), this.sprite.scaleX = this.sprite.scaleY = a.map(0, 1, 1 - (1 - this.minScale) / 1.3, this.minScale);
        if (this.sprite.scaleX < this.minScale) this.sprite.scaleX = this.sprite.scaleY = this.minScale;
        this.circleCollision.r = getConst(30) * this.sprite.scaleX
    }
};
Ball3.prototype.draw = function () {
    this.sprite.draw();
    this.circleCollision.drawDebug()
};
Ball3.prototype.makeShoot = function (a, b, c) {
    createjs.Tween.get(this.sprite).to({
        x: this.sprite.x + 2 * a,
        y: this.sprite.y + 2 * b
    }, 200).call(function () {
        c = MLE.Util.toDeg(c);
        var e = getConst(-975),
            d = window.gameScene.windPower,
            f = getConst(1100);
        this.simpleMovement.setValues(e / b * a, e, d, f);
        window.gameScene.currentState = window.gameScene.states.IN_AIR_UP
    }.bind(this))
};
Ball3.prototype.rotateStop = function () {
    this.rotationSpeed = 0
};
Ball3.prototype.rotateSlow = function () {
    this.rotationSpeed = 500
};
Ball3.prototype.rotateFast = function () {
    this.rotationSpeed = 1500
};
Ball3.prototype.startFalling = function () {};
Ball3.prototype.startFalling = function () {};
var AimArrow = function () {
    this.init()
};
AimArrow.prototype.init = function () {
    this.maxAngle = 50;
    this.angleChangeDirection = 1;
    this.angleChangeSpeed = 80;
    this.sprite = new MLE.Sprite("aimArrow", MLE.width / 2, MLE.height - getConst(50));
    this.sprite.setPivotPercent(0.5, 1.1);
    this.shootAngle = this.shotDirectionY = this.shotDirectionX = -1;
    this.makeRotationTween()
};
AimArrow.prototype.update = function () {
    var a = this.sprite.pivotY * this.sprite.scaleY,
        b = this.sprite.x + Math.sin(MLE.Util.toRad(this.sprite.angle)) * a,
        a = this.sprite.y - Math.cos(MLE.Util.toRad(this.sprite.angle)) * a;
    this.shotDirectionX = b - this.sprite.x;
    this.shotDirectionY = a - this.sprite.y;
    this.shootAngle = this.sprite.angle
};
AimArrow.prototype.draw = function () {
    this.sprite.draw()
};
AimArrow.prototype.makeRotationTween = function () {
    createjs.Tween.removeTweens(this.sprite);
    this.sprite.scaleY = 0.95;
    this.rotationTween = createjs.Tween.get(this.sprite, {
        loop: true
    }).to({
        angle: 38
    }, 500).to({
        angle: -38
    }, 1E3).to({
        angle: 0
    }, 500)
};
AimArrow.prototype.stopRotationTween = function () {
    this.rotationTween._paused = true;
    createjs.Tween.get(this.sprite).wait(500).to({
        alpha: 0
    }, 350)
};
AimArrow.prototype.resumeRotationTween = function () {
    this.rotationTween._paused = false;
    createjs.Tween.get(this.sprite).wait(500).to({
        alpha: 1
    }, 350).call(function () {
        window.gameScene.currentState = window.gameScene.states.AIMING
    })
};
AimArrow.prototype.setPaused = function (a) {
    this.rotationTween._paused = a
};
var GUI = function (a) {
    this.init(a)
};
GUI.prototype.init = function (a) {
    this.multiplier = a;
    this.group = new MLE.Group;
    this.box1 = new MLE.Sprite("box", 130, 40);
    this.group.addChild(this.box1);
    this.box1.centerPivot();
    this.box2 = new MLE.Sprite("box", MLE.width - 130, 40);
    this.group.addChild(this.box2);
    this.box2.centerPivot();
    this.points = new MLE.TextSprite;
    this.points.x = getConst(173);
    this.points.y = getConst(38);
    this.points.text = "0";
    this.ptsText = new MLE.TextSprite;
    this.ptsText.text = currLang.points + ":";
    this.ptsText.size = 25;
    this.ptsText.x = getConst(42);
    this.ptsText.align =
        "left";
    this.ptsText.y = getConst(40);
    this.ptsText.adjustFontSize(77);
    this.group.addChild(this.ptsText);
    this.bstText = new MLE.TextSprite;
    this.bstText.text = currLang.best + ":";
    this.bstText.size = 25;
    this.bstText.x = getConst(381);
    this.bstText.align = "left";
    this.bstText.y = getConst(40);
    this.bstText.adjustFontSize(77);
    this.group.addChild(this.bstText);
    this.best = new MLE.TextSprite;
    this.best.x = getConst(508);
    this.best.y = getConst(38);
    this.best.text = "0";
    this.group.addChild(this.best);
    this.newPoints = new MLE.TextSprite;
    this.newPoints.x = getConst(220);
    this.newPoints.y = getConst({
        1: 400,
        2: 340,
        3: 215
    }[a + ""]);
    this.newPoints.text = "+5";
    this.group.addChild(this.newPoints);
    this.group.addChild(this.points);
    this.newPoints.xOffset = 0;
    this.pointsNumber = this.newPoints.alpha = 0;
    localStorage.FurEyeGamesFeedTheMonsterBestScore ? this.bestNumber = Number(localStorage.FurEyeGamesFeedTheMonsterBestScore) : (localStorage.FurEyeGamesFeedTheMonsterBestScore = "0", this.bestNumber = 0);
    this.alpha = 1;
    this.inRow = this.levelUp = 0
};
GUI.prototype.update = function () {};
GUI.prototype.draw = function () {
    var a = MLE.context.globalAlpha;
    MLE.context.globalAlpha *= this.alpha;
    this.points.text = "" + Math.round(this.pointsNumber);
    this.best.text = "" + this.bestNumber;
    this.newPoints.x = this.newPoints.xStart + this.newPoints.xOffset;
    this.group.draw();
    MLE.context.globalAlpha = a
};
GUI.prototype.addPoints = function (a) {
    a *= 100;
    this.newPoints.xOffset = 0;
    this.newPoints.xStart = MLE.width / 2 + 30;
    this.newPoints.text = "+" + a;
    if (this.multiplier !== 1) this.newPoints.text = "+ " + this.multiplier + " x " + a;
    createjs.Tween.get(this.newPoints).to({
        alpha: 1
    }, 150).wait(350).to({
        xOffset: -getConst(30),
        alpha: 0
    }, 500, createjs.Ease.sineInOut);
    a *= this.multiplier;
    for (var b = 0; b < a; b += 100) createjs.Tween.get(this).wait(500 / a * (b + 1) + 350).call(function () {
        this.pointsNumber += 100;
        this.pointsNumber > this.bestNumber && (this.bestNumber +=
            100)
    }.bind(this));
    this.pointsNumber + a > this.bestNumber && (localStorage.FurEyeGamesFeedTheMonsterBestScore = this.pointsNumber + a + "");
    this.inRow += 1;
    if (this.inRow === 4) this.inRow = 0, SG_Hooks.levelUp(this.multiplier, this.pointsNumber + a)
};
GUI.prototype.zeroPoints = function () {
    this.inRow += 1;
    if (this.inRow === 4) this.inRow = 0, SG_Hooks.gameOver(this.multiplier, this.pointsNumber);
    createjs.Tween.get(this).to({
        pointsNumber: 0
    }, 750, createjs.Ease.sineInOut)
};
var FanAnim = function () {
    this.init()
};
FanAnim.prototype.init = function () {
    this.sprite = new MLE.Sprite("fan_01", 355, 130);
    this.imageAnim = new MLE.ImageAnim(this.sprite);
    this.imageAnim.addAnim("fan", "fan_01,fan_02,fan_03,fan_04,fan_05,fan_06".split(","), 10);
    this.imageAnim.gotoAndPlay(0, "fan")
};
FanAnim.prototype.update = function () {
    this.imageAnim.update()
};
FanAnim.prototype.draw = function () {
    this.sprite.draw()
};
var FanAnim2 = function () {
    this.init()
};
FanAnim2.prototype.init = function () {
    this.sprite = new MLE.Sprite("fan_01", 0, 0);
    this.imageAnim = new MLE.ImageAnim(this.sprite);
    this.imageAnim.addAnim("fan", "fan2_01,fan2_02,fan2_03,fan2_04,fan2_05,fan2_06,fan2_07,fan2_08".split(","), 20);
    this.imageAnim.gotoAndPlay(0, "fan")
};
FanAnim2.prototype.update = function () {
    this.imageAnim.update()
};
FanAnim2.prototype.draw = function () {
    this.sprite.draw()
};
var FanAnim3 = function () {
    this.init()
};
FanAnim3.prototype.init = function () {
    this.sprite = new MLE.Sprite("fan_01", 220, 170);
    this.imageAnim = new MLE.ImageAnim(this.sprite);
    this.imageAnim.addAnim("fan", "fan3_01,fan3_02,fan3_03,fan3_04,fan3_05,fan3_06,fan3_07,fan3_08,fan3_09".split(","), 10);
    this.imageAnim.gotoAndPlay(0, "fan")
};
FanAnim3.prototype.update = function () {
    this.imageAnim.update()
};
FanAnim3.prototype.draw = function () {
    this.sprite.draw()
};
var PauseWindow = function () {
    this.init()
};
PauseWindow.prototype.init = function () {
    this.sprite = new MLE.Sprite("popup", 0, 0);
    this.sprite.centerPivot();
    this.sprite.x = MLE.width / 2;
    this.sprite.y = MLE.height / 2 - 15;
    this.sprite.alpha = 0;
    this.resumeButton = new MenuButton("button", currLang.resume);
    this.resumeButton.group.x = MLE.width / 2;
    this.resumeButton.group.y = 380;
    this.resumeButton.group.alpha = 0;
    this.resumeButton.clickCallback = this.resumeClicked.bind(this);
    this.backToMenuButton = new MenuButton("button", currLang.backToMenu);
    this.backToMenuButton.group.x = MLE.width /
        2;
    this.backToMenuButton.group.y = 530;
    this.backToMenuButton.group.alpha = 0;
    this.backToMenuButton.clickCallback = this.backToMainMenu.bind(this)
};
PauseWindow.prototype.update = function () {
    this.sprite.alpha === 1 && (this.resumeButton.update(), this.backToMenuButton.update())
};
PauseWindow.prototype.draw = function () {
    this.sprite.draw();
    this.resumeButton.draw();
    this.backToMenuButton.draw()
};
PauseWindow.prototype.show = function () {
    createjs.Tween.get(this.sprite).to({
        alpha: 1
    }, 350);
    createjs.Tween.get(this.resumeButton.group).wait(200).to({
        alpha: 1
    }, 350);
    createjs.Tween.get(this.backToMenuButton.group).wait(400).to({
        alpha: 1
    }, 350)
};
PauseWindow.prototype.hide = function () {
    createjs.Tween.get(this.sprite).to({
        alpha: 0
    }, 350);
    createjs.Tween.get(this.resumeButton.group).to({
        alpha: 0
    }, 350);
    createjs.Tween.get(this.backToMenuButton.group).to({
        alpha: 0
    }, 350)
};
PauseWindow.prototype.resumeClicked = function () {
    this.hide();
    gameScene.resume()
};
PauseWindow.prototype.backToMainMenu = function () {
    this.resumeButton.block = true;
    this.backToMenuButton.block = true;
    createjs.Tween.get(window.director).to({
        rectAlpha: 1
    }, 250, createjs.Ease.sineInOut).call(function () {
        createjs.Tween._tweens = [];
        window.director.nextScene = new MainMenu;
        createjs.Tween.get(window.director).to({
            rectAlpha: 0
        }, 500, createjs.Ease.sineInOut)
    })
};
var RotateScene = function () {
    this.init()
};
RotateScene.prototype.init = function () {
    window.rotateScene = this;
    this.rotateImage = new MLE.Sprite("rotate", MLE.width / 2, MLE.height / 2);
    this.rotateImage.scaleX = this.rotateImage.scaleY = 1.75;
    this.rotateImage.centerPivot()
};
RotateScene.prototype.update = function () {
    document.body.style["background-color"] = "#45357D"
};
RotateScene.prototype.draw = function () {
    MLE.context.fillStyle = "#45357D";
    MLE.context.fillRect(0, 0, MLE.width, MLE.height);
    this.rotateImage.draw()
};
var isSmall, remote = {
        log: function () {}
    },
    monsterType = 1,
    windowOnload = function () {
        var a = [],
            b;
        for (b in window.languages) a.push(b);
        b = SG.lang; //SG_Hooks.getLanguage(a);
        window.currLang = window.languages[b];
        a = function () {};
        SG_Hooks.setOrientationHandler(a);
        SG_Hooks.setResizeHandler(a);
        a = (isSmall = false, "media2");
        b = isSmall ? "preloaderSD" : "preloaderHD";
        MLE.init({
            preManifest: [{
                src: "./" + b + "/logoWithoutRim.png",
                id: "logoWithoutRim"
            }, {
                src: "./" + b + "/eyeAnim.png",
                id: "eyeAnim"
            }, {
                src: "./" + b + "/loadingBar0.png",
                id: "loadingBar0"
            }, {
                src: "./" +
                    b + "/loadingBar1.png",
                id: "loadingBar1"
            }, {
                src: "./" + b + "/loadingTextAnim.png",
                id: "loadingTextAnim"
            }, {
                src: "./" + b + "/rotatePortrait.png",
                id: "rotate"
            }, {
                src: "./" + b + "/rim.png",
                id: "rim"
            }],
            preLoaderScene: PreLoaderScene,
            manifest: [{
                src: "./" + a + "/shadow.png",
                id: "shadow"
            }, {
                src: "./" + a + "/aimArrow.png",
                id: "aimArrow"
            }, {
                src: "./" + a + "/gameBackground.jpg",
                id: "gameBackground"
            }, {
                src: "./" + a + "/gameBackground2.jpg",
                id: "gameBackground2"
            }, {
                src: "./" + a + "/gameBackground3.jpg",
                id: "gameBackground3"
            }, {
                src: "./" + a + "/splash.jpg",
                id: "splash"
            }, {
                src: "./" + a + "/paper.png",
                id: "paper"
            }, {
                src: "./" + a + "/wind.png",
                id: "wind"
            }, {
                src: "./" + a + "/goal.png",
                id: "goal"
            }, {
                src: "./" + a + "/goalFront.png",
                id: "goalFront"
            }, {
                src: "./" + a + "/goal2.png",
                id: "goal2"
            }, {
                src: "./" + a + "/goal2Front.png",
                id: "goal2Front"
            }, {
                src: "./" + a + "/goal3.png",
                id: "goal3"
            }, {
                src: "./" + a + "/goal3Front.png",
                id: "goal3Front"
            }, {
                src: "./" + a + "/fan_01.png",
                id: "fan_01"
            }, {
                src: "./" + a + "/fan_02.png",
                id: "fan_02"
            }, {
                src: "./" + a + "/fan_03.png",
                id: "fan_03"
            }, {
                src: "./" + a + "/fan_04.png",
                id: "fan_04"
            }, {
                src: "./" + a + "/fan_05.png",
                id: "fan_05"
            }, {
                src: "./" + a + "/fan_06.png",
                id: "fan_06"
            }, {
                src: "./" + a + "/fan2_01.png",
                id: "fan2_01"
            }, {
                src: "./" + a + "/fan2_02.png",
                id: "fan2_02"
            }, {
                src: "./" + a + "/fan2_03.png",
                id: "fan2_03"
            }, {
                src: "./" + a + "/fan2_04.png",
                id: "fan2_04"
            }, {
                src: "./" + a + "/fan2_05.png",
                id: "fan2_05"
            }, {
                src: "./" + a + "/fan2_06.png",
                id: "fan2_06"
            }, {
                src: "./" + a + "/fan2_07.png",
                id: "fan2_07"
            }, {
                src: "./" + a + "/fan2_08.png",
                id: "fan2_08"
            }, {
                src: "./" + a + "/fan3_01.png",
                id: "fan3_01"
            }, {
                src: "./" + a + "/fan3_02.png",
                id: "fan3_02"
            }, {
                src: "./" + a + "/fan3_03.png",
                id: "fan3_03"
            }, {
                src: "./" + a + "/fan3_04.png",
                id: "fan3_04"
            }, {
                src: "./" + a + "/fan3_05.png",
                id: "fan3_05"
            }, {
                src: "./" + a + "/fan3_06.png",
                id: "fan3_06"
            }, {
                src: "./" + a + "/fan3_07.png",
                id: "fan3_07"
            }, {
                src: "./" + a + "/fan3_08.png",
                id: "fan3_08"
            }, {
                src: "./" + a + "/fan3_09.png",
                id: "fan3_09"
            }, {
                src: "./" + a + "/box.png",
                id: "box"
            }, {
                src: "./" + a + "/pause_normal.png",
                id: "pause_normal"
            }, {
                src: "./" + a + "/pause_select.png",
                id: "pause_select"
            }, {
                src: "./" + a + "/button_normal.png",
                id: "button_normal"
            }, {
                src: "./" + a + "/button_select.png",
                id: "button_select"
            }, {
                src: "./" + a + "/popup.png",
                id: "popup"
            }, {
                src: "./" + a + "/front3.png",
                id: "front3"
            }],
            game: Director,
            height: 800,
            width: 600,
            scaling: true,
            showDebug: false
        })
    };
window.addEventListener("load", windowOnload, true);
var getConst = function (a) {
    return a * MLE.width / 600
};